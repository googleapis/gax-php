<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/logging.proto
//   Date: 2016-11-23 22:55:01

namespace google\api\Logging {

  class LoggingDestination extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $monitored_resource = null;
    
    /**  @var string[]  */
    public $logs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Logging.LoggingDestination');

      // OPTIONAL STRING monitored_resource = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "monitored_resource";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING logs = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "logs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <monitored_resource> has a value
     *
     * @return boolean
     */
    public function hasMonitoredResource(){
      return $this->_has(3);
    }
    
    /**
     * Clear <monitored_resource> value
     *
     * @return \google\api\Logging\LoggingDestination
     */
    public function clearMonitoredResource(){
      return $this->_clear(3);
    }
    
    /**
     * Get <monitored_resource> value
     *
     * @return string
     */
    public function getMonitoredResource(){
      return $this->_get(3);
    }
    
    /**
     * Set <monitored_resource> value
     *
     * @param string $value
     * @return \google\api\Logging\LoggingDestination
     */
    public function setMonitoredResource( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <logs> has a value
     *
     * @return boolean
     */
    public function hasLogs(){
      return $this->_has(1);
    }
    
    /**
     * Clear <logs> value
     *
     * @return \google\api\Logging\LoggingDestination
     */
    public function clearLogs(){
      return $this->_clear(1);
    }
    
    /**
     * Get <logs> value
     *
     * @param int $idx
     * @return string
     */
    public function getLogs($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <logs> value
     *
     * @param string $value
     * @return \google\api\Logging\LoggingDestination
     */
    public function setLogs( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <logs>
     *
     * @return string[]
     */
    public function getLogsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <logs>
     *
     * @param string $value
     * @return \google\api\Logging\LoggingDestination
     */
    public function addLogs( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\api {

  class Logging extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\Logging\LoggingDestination[]  */
    public $producer_destinations = array();
    
    /**  @var \google\api\Logging\LoggingDestination[]  */
    public $consumer_destinations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Logging');

      // REPEATED MESSAGE producer_destinations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "producer_destinations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Logging\LoggingDestination';
      $descriptor->addField($f);

      // REPEATED MESSAGE consumer_destinations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "consumer_destinations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Logging\LoggingDestination';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <producer_destinations> has a value
     *
     * @return boolean
     */
    public function hasProducerDestinations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <producer_destinations> value
     *
     * @return \google\api\Logging
     */
    public function clearProducerDestinations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <producer_destinations> value
     *
     * @param int $idx
     * @return \google\api\Logging\LoggingDestination
     */
    public function getProducerDestinations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <producer_destinations> value
     *
     * @param \google\api\Logging\LoggingDestination $value
     * @return \google\api\Logging
     */
    public function setProducerDestinations(\google\api\Logging\LoggingDestination $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <producer_destinations>
     *
     * @return \google\api\Logging\LoggingDestination[]
     */
    public function getProducerDestinationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <producer_destinations>
     *
     * @param \google\api\Logging\LoggingDestination $value
     * @return \google\api\Logging
     */
    public function addProducerDestinations(\google\api\Logging\LoggingDestination $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <consumer_destinations> has a value
     *
     * @return boolean
     */
    public function hasConsumerDestinations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <consumer_destinations> value
     *
     * @return \google\api\Logging
     */
    public function clearConsumerDestinations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <consumer_destinations> value
     *
     * @param int $idx
     * @return \google\api\Logging\LoggingDestination
     */
    public function getConsumerDestinations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <consumer_destinations> value
     *
     * @param \google\api\Logging\LoggingDestination $value
     * @return \google\api\Logging
     */
    public function setConsumerDestinations(\google\api\Logging\LoggingDestination $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <consumer_destinations>
     *
     * @return \google\api\Logging\LoggingDestination[]
     */
    public function getConsumerDestinationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <consumer_destinations>
     *
     * @param \google\api\Logging\LoggingDestination $value
     * @return \google\api\Logging
     */
    public function addConsumerDestinations(\google\api\Logging\LoggingDestination $value){
     return $this->_add(2, $value);
    }
  }
}

