<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/protobuf/struct.proto
//   Date: 2016-07-18 20:27:54

namespace google\protobuf {

  class NullValue extends \DrSlump\Protobuf\Enum {
    const NULL_VALUE = 0;
  }
}
namespace google\protobuf\Struct {

  class FieldsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\protobuf\Value */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Struct.FieldsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\protobuf\Struct\FieldsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\protobuf\Struct\FieldsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\protobuf\Struct\FieldsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\Value
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\Value $value
     * @return \google\protobuf\Struct\FieldsEntry
     */
    public function setValue(\google\protobuf\Value $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\protobuf {

  class Struct extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Struct\FieldsEntry[]  */
    public $fields = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Struct');

      // REPEATED MESSAGE fields = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Struct\FieldsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(1);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \google\protobuf\Struct
     */
    public function clearFields(){
      return $this->_clear(1);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \google\protobuf\Struct\FieldsEntry
     */
    public function getFields($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \google\protobuf\Struct\FieldsEntry $value
     * @return \google\protobuf\Struct
     */
    public function setFields(\google\protobuf\Struct\FieldsEntry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \google\protobuf\Struct\FieldsEntry[]
     */
    public function getFieldsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \google\protobuf\Struct\FieldsEntry $value
     * @return \google\protobuf\Struct
     */
    public function addFields(\google\protobuf\Struct\FieldsEntry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\protobuf {

  class Value extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\protobuf\NullValue */
    public $null_value = null;
    
    /**  @var float */
    public $number_value = null;
    
    /**  @var string */
    public $string_value = null;
    
    /**  @var boolean */
    public $bool_value = null;
    
    /**  @var \google\protobuf\Struct */
    public $struct_value = null;
    
    /**  @var \google\protobuf\ListValue */
    public $list_value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Value');

      // OPTIONAL ENUM null_value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "null_value";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\NullValue';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE number_value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number_value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING string_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "string_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL bool_value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "bool_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE struct_value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "struct_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Struct';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE list_value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "list_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <null_value> has a value
     *
     * @return boolean
     */
    public function hasNullValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <null_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearNullValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <null_value> value
     *
     * @return int - \google\protobuf\NullValue
     */
    public function getNullValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <null_value> value
     *
     * @param int - \google\protobuf\NullValue $value
     * @return \google\protobuf\Value
     */
    public function setNullValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number_value> has a value
     *
     * @return boolean
     */
    public function hasNumberValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearNumberValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number_value> value
     *
     * @return float
     */
    public function getNumberValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <number_value> value
     *
     * @param float $value
     * @return \google\protobuf\Value
     */
    public function setNumberValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <string_value> has a value
     *
     * @return boolean
     */
    public function hasStringValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <string_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearStringValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <string_value> value
     *
     * @return string
     */
    public function getStringValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <string_value> value
     *
     * @param string $value
     * @return \google\protobuf\Value
     */
    public function setStringValue( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <bool_value> has a value
     *
     * @return boolean
     */
    public function hasBoolValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <bool_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearBoolValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <bool_value> value
     *
     * @return boolean
     */
    public function getBoolValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <bool_value> value
     *
     * @param boolean $value
     * @return \google\protobuf\Value
     */
    public function setBoolValue( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <struct_value> has a value
     *
     * @return boolean
     */
    public function hasStructValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <struct_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearStructValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <struct_value> value
     *
     * @return \google\protobuf\Struct
     */
    public function getStructValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <struct_value> value
     *
     * @param \google\protobuf\Struct $value
     * @return \google\protobuf\Value
     */
    public function setStructValue(\google\protobuf\Struct $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <list_value> has a value
     *
     * @return boolean
     */
    public function hasListValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <list_value> value
     *
     * @return \google\protobuf\Value
     */
    public function clearListValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <list_value> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getListValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <list_value> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\protobuf\Value
     */
    public function setListValue(\google\protobuf\ListValue $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\protobuf {

  class ListValue extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Value[]  */
    public $values = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.ListValue');

      // REPEATED MESSAGE values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <values> value
     *
     * @return \google\protobuf\ListValue
     */
    public function clearValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return \google\protobuf\Value
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param \google\protobuf\Value $value
     * @return \google\protobuf\ListValue
     */
    public function setValues(\google\protobuf\Value $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return \google\protobuf\Value[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param \google\protobuf\Value $value
     * @return \google\protobuf\ListValue
     */
    public function addValues(\google\protobuf\Value $value){
     return $this->_add(1, $value);
    }
  }
}

