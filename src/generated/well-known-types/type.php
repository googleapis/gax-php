<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/protobuf/type.proto
//   Date: 2016-07-18 20:27:54

namespace google\protobuf {

  class Syntax extends \DrSlump\Protobuf\Enum {
    const SYNTAX_PROTO2 = 0;
    const SYNTAX_PROTO3 = 1;
  }
}
namespace google\protobuf {

  class Type extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\Field[]  */
    public $fields = array();
    
    /**  @var string[]  */
    public $oneofs = array();
    
    /**  @var \google\protobuf\Option[]  */
    public $options = array();
    
    /**  @var \google\protobuf\SourceContext */
    public $source_context = null;
    
    /**  @var int - \google\protobuf\Syntax */
    public $syntax = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Type');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE fields = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Field';
      $descriptor->addField($f);

      // REPEATED STRING oneofs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "oneofs";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE options = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Option';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source_context = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "source_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\SourceContext';
      $descriptor->addField($f);

      // OPTIONAL ENUM syntax = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "syntax";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Syntax';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\Type
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\Type
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \google\protobuf\Type
     */
    public function clearFields(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \google\protobuf\Field
     */
    public function getFields($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \google\protobuf\Field $value
     * @return \google\protobuf\Type
     */
    public function setFields(\google\protobuf\Field $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \google\protobuf\Field[]
     */
    public function getFieldsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \google\protobuf\Field $value
     * @return \google\protobuf\Type
     */
    public function addFields(\google\protobuf\Field $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <oneofs> has a value
     *
     * @return boolean
     */
    public function hasOneofs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <oneofs> value
     *
     * @return \google\protobuf\Type
     */
    public function clearOneofs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <oneofs> value
     *
     * @param int $idx
     * @return string
     */
    public function getOneofs($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <oneofs> value
     *
     * @param string $value
     * @return \google\protobuf\Type
     */
    public function setOneofs( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <oneofs>
     *
     * @return string[]
     */
    public function getOneofsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <oneofs>
     *
     * @param string $value
     * @return \google\protobuf\Type
     */
    public function addOneofs( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(4);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\Type
     */
    public function clearOptions(){
      return $this->_clear(4);
    }
    
    /**
     * Get <options> value
     *
     * @param int $idx
     * @return \google\protobuf\Option
     */
    public function getOptions($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Type
     */
    public function setOptions(\google\protobuf\Option $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <options>
     *
     * @return \google\protobuf\Option[]
     */
    public function getOptionsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <options>
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Type
     */
    public function addOptions(\google\protobuf\Option $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <source_context> has a value
     *
     * @return boolean
     */
    public function hasSourceContext(){
      return $this->_has(5);
    }
    
    /**
     * Clear <source_context> value
     *
     * @return \google\protobuf\Type
     */
    public function clearSourceContext(){
      return $this->_clear(5);
    }
    
    /**
     * Get <source_context> value
     *
     * @return \google\protobuf\SourceContext
     */
    public function getSourceContext(){
      return $this->_get(5);
    }
    
    /**
     * Set <source_context> value
     *
     * @param \google\protobuf\SourceContext $value
     * @return \google\protobuf\Type
     */
    public function setSourceContext(\google\protobuf\SourceContext $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <syntax> has a value
     *
     * @return boolean
     */
    public function hasSyntax(){
      return $this->_has(6);
    }
    
    /**
     * Clear <syntax> value
     *
     * @return \google\protobuf\Type
     */
    public function clearSyntax(){
      return $this->_clear(6);
    }
    
    /**
     * Get <syntax> value
     *
     * @return int - \google\protobuf\Syntax
     */
    public function getSyntax(){
      return $this->_get(6);
    }
    
    /**
     * Set <syntax> value
     *
     * @param int - \google\protobuf\Syntax $value
     * @return \google\protobuf\Type
     */
    public function setSyntax( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\protobuf\Field {

  class Kind extends \DrSlump\Protobuf\Enum {
    const TYPE_UNKNOWN = 0;
    const TYPE_DOUBLE = 1;
    const TYPE_FLOAT = 2;
    const TYPE_INT64 = 3;
    const TYPE_UINT64 = 4;
    const TYPE_INT32 = 5;
    const TYPE_FIXED64 = 6;
    const TYPE_FIXED32 = 7;
    const TYPE_BOOL = 8;
    const TYPE_STRING = 9;
    const TYPE_GROUP = 10;
    const TYPE_MESSAGE = 11;
    const TYPE_BYTES = 12;
    const TYPE_UINT32 = 13;
    const TYPE_ENUM = 14;
    const TYPE_SFIXED32 = 15;
    const TYPE_SFIXED64 = 16;
    const TYPE_SINT32 = 17;
    const TYPE_SINT64 = 18;
  }
}
namespace google\protobuf\Field {

  class Cardinality extends \DrSlump\Protobuf\Enum {
    const CARDINALITY_UNKNOWN = 0;
    const CARDINALITY_OPTIONAL = 1;
    const CARDINALITY_REQUIRED = 2;
    const CARDINALITY_REPEATED = 3;
  }
}
namespace google\protobuf {

  class Field extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\protobuf\Field\Kind */
    public $kind = null;
    
    /**  @var int - \google\protobuf\Field\Cardinality */
    public $cardinality = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $type_url = null;
    
    /**  @var int */
    public $oneof_index = null;
    
    /**  @var boolean */
    public $packed = null;
    
    /**  @var \google\protobuf\Option[]  */
    public $options = array();
    
    /**  @var string */
    public $json_name = null;
    
    /**  @var string */
    public $default_value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Field');

      // OPTIONAL ENUM kind = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Field\Kind';
      $descriptor->addField($f);

      // OPTIONAL ENUM cardinality = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cardinality";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Field\Cardinality';
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type_url = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "type_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 oneof_index = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "oneof_index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL packed = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "packed";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE options = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Option';
      $descriptor->addField($f);

      // OPTIONAL STRING json_name = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "json_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING default_value = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "default_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \google\protobuf\Field
     */
    public function clearKind(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kind> value
     *
     * @return int - \google\protobuf\Field\Kind
     */
    public function getKind(){
      return $this->_get(1);
    }
    
    /**
     * Set <kind> value
     *
     * @param int - \google\protobuf\Field\Kind $value
     * @return \google\protobuf\Field
     */
    public function setKind( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cardinality> has a value
     *
     * @return boolean
     */
    public function hasCardinality(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cardinality> value
     *
     * @return \google\protobuf\Field
     */
    public function clearCardinality(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cardinality> value
     *
     * @return int - \google\protobuf\Field\Cardinality
     */
    public function getCardinality(){
      return $this->_get(2);
    }
    
    /**
     * Set <cardinality> value
     *
     * @param int - \google\protobuf\Field\Cardinality $value
     * @return \google\protobuf\Field
     */
    public function setCardinality( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\Field
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\Field
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\Field
     */
    public function clearName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(4);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\Field
     */
    public function setName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type_url> has a value
     *
     * @return boolean
     */
    public function hasTypeUrl(){
      return $this->_has(6);
    }
    
    /**
     * Clear <type_url> value
     *
     * @return \google\protobuf\Field
     */
    public function clearTypeUrl(){
      return $this->_clear(6);
    }
    
    /**
     * Get <type_url> value
     *
     * @return string
     */
    public function getTypeUrl(){
      return $this->_get(6);
    }
    
    /**
     * Set <type_url> value
     *
     * @param string $value
     * @return \google\protobuf\Field
     */
    public function setTypeUrl( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <oneof_index> has a value
     *
     * @return boolean
     */
    public function hasOneofIndex(){
      return $this->_has(7);
    }
    
    /**
     * Clear <oneof_index> value
     *
     * @return \google\protobuf\Field
     */
    public function clearOneofIndex(){
      return $this->_clear(7);
    }
    
    /**
     * Get <oneof_index> value
     *
     * @return int
     */
    public function getOneofIndex(){
      return $this->_get(7);
    }
    
    /**
     * Set <oneof_index> value
     *
     * @param int $value
     * @return \google\protobuf\Field
     */
    public function setOneofIndex( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <packed> has a value
     *
     * @return boolean
     */
    public function hasPacked(){
      return $this->_has(8);
    }
    
    /**
     * Clear <packed> value
     *
     * @return \google\protobuf\Field
     */
    public function clearPacked(){
      return $this->_clear(8);
    }
    
    /**
     * Get <packed> value
     *
     * @return boolean
     */
    public function getPacked(){
      return $this->_get(8);
    }
    
    /**
     * Set <packed> value
     *
     * @param boolean $value
     * @return \google\protobuf\Field
     */
    public function setPacked( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(9);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\Field
     */
    public function clearOptions(){
      return $this->_clear(9);
    }
    
    /**
     * Get <options> value
     *
     * @param int $idx
     * @return \google\protobuf\Option
     */
    public function getOptions($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Field
     */
    public function setOptions(\google\protobuf\Option $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <options>
     *
     * @return \google\protobuf\Option[]
     */
    public function getOptionsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <options>
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Field
     */
    public function addOptions(\google\protobuf\Option $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <json_name> has a value
     *
     * @return boolean
     */
    public function hasJsonName(){
      return $this->_has(10);
    }
    
    /**
     * Clear <json_name> value
     *
     * @return \google\protobuf\Field
     */
    public function clearJsonName(){
      return $this->_clear(10);
    }
    
    /**
     * Get <json_name> value
     *
     * @return string
     */
    public function getJsonName(){
      return $this->_get(10);
    }
    
    /**
     * Set <json_name> value
     *
     * @param string $value
     * @return \google\protobuf\Field
     */
    public function setJsonName( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <default_value> has a value
     *
     * @return boolean
     */
    public function hasDefaultValue(){
      return $this->_has(11);
    }
    
    /**
     * Clear <default_value> value
     *
     * @return \google\protobuf\Field
     */
    public function clearDefaultValue(){
      return $this->_clear(11);
    }
    
    /**
     * Get <default_value> value
     *
     * @return string
     */
    public function getDefaultValue(){
      return $this->_get(11);
    }
    
    /**
     * Set <default_value> value
     *
     * @param string $value
     * @return \google\protobuf\Field
     */
    public function setDefaultValue( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace google\protobuf {

  class Enum extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\EnumValue[]  */
    public $enumvalue = array();
    
    /**  @var \google\protobuf\Option[]  */
    public $options = array();
    
    /**  @var \google\protobuf\SourceContext */
    public $source_context = null;
    
    /**  @var int - \google\protobuf\Syntax */
    public $syntax = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Enum');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE enumvalue = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "enumvalue";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\EnumValue';
      $descriptor->addField($f);

      // REPEATED MESSAGE options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Option';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source_context = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\SourceContext';
      $descriptor->addField($f);

      // OPTIONAL ENUM syntax = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "syntax";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Syntax';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\Enum
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\Enum
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <enumvalue> has a value
     *
     * @return boolean
     */
    public function hasEnumvalue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <enumvalue> value
     *
     * @return \google\protobuf\Enum
     */
    public function clearEnumvalue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <enumvalue> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumValue
     */
    public function getEnumvalue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <enumvalue> value
     *
     * @param \google\protobuf\EnumValue $value
     * @return \google\protobuf\Enum
     */
    public function setEnumvalue(\google\protobuf\EnumValue $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <enumvalue>
     *
     * @return \google\protobuf\EnumValue[]
     */
    public function getEnumvalueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <enumvalue>
     *
     * @param \google\protobuf\EnumValue $value
     * @return \google\protobuf\Enum
     */
    public function addEnumvalue(\google\protobuf\EnumValue $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\Enum
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @param int $idx
     * @return \google\protobuf\Option
     */
    public function getOptions($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Enum
     */
    public function setOptions(\google\protobuf\Option $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <options>
     *
     * @return \google\protobuf\Option[]
     */
    public function getOptionsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <options>
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\Enum
     */
    public function addOptions(\google\protobuf\Option $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <source_context> has a value
     *
     * @return boolean
     */
    public function hasSourceContext(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_context> value
     *
     * @return \google\protobuf\Enum
     */
    public function clearSourceContext(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_context> value
     *
     * @return \google\protobuf\SourceContext
     */
    public function getSourceContext(){
      return $this->_get(4);
    }
    
    /**
     * Set <source_context> value
     *
     * @param \google\protobuf\SourceContext $value
     * @return \google\protobuf\Enum
     */
    public function setSourceContext(\google\protobuf\SourceContext $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <syntax> has a value
     *
     * @return boolean
     */
    public function hasSyntax(){
      return $this->_has(5);
    }
    
    /**
     * Clear <syntax> value
     *
     * @return \google\protobuf\Enum
     */
    public function clearSyntax(){
      return $this->_clear(5);
    }
    
    /**
     * Get <syntax> value
     *
     * @return int - \google\protobuf\Syntax
     */
    public function getSyntax(){
      return $this->_get(5);
    }
    
    /**
     * Set <syntax> value
     *
     * @param int - \google\protobuf\Syntax $value
     * @return \google\protobuf\Enum
     */
    public function setSyntax( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\protobuf {

  class EnumValue extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $number = null;
    
    /**  @var \google\protobuf\Option[]  */
    public $options = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.EnumValue');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Option';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\EnumValue
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\EnumValue
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\EnumValue
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\EnumValue
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\EnumValue
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @param int $idx
     * @return \google\protobuf\Option
     */
    public function getOptions($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\EnumValue
     */
    public function setOptions(\google\protobuf\Option $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <options>
     *
     * @return \google\protobuf\Option[]
     */
    public function getOptionsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <options>
     *
     * @param \google\protobuf\Option $value
     * @return \google\protobuf\EnumValue
     */
    public function addOptions(\google\protobuf\Option $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\protobuf {

  class Option extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\protobuf\Any */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.protobuf.Option');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\Option
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\Option
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\protobuf\Option
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\Any
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\protobuf\Option
     */
    public function setValue(\google\protobuf\Any $value){
      return $this->_set(2, $value);
    }
  }
}

