<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/httpbody.proto
//   Date: 2016-11-23 22:55:01

namespace google\api {

  class HttpBody extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $content_type = null;
    
    /**  @var string */
    public $data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.HttpBody');

      // OPTIONAL STRING content_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <content_type> has a value
     *
     * @return boolean
     */
    public function hasContentType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content_type> value
     *
     * @return \google\api\HttpBody
     */
    public function clearContentType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content_type> value
     *
     * @return string
     */
    public function getContentType(){
      return $this->_get(1);
    }
    
    /**
     * Set <content_type> value
     *
     * @param string $value
     * @return \google\api\HttpBody
     */
    public function setContentType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \google\api\HttpBody
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \google\api\HttpBody
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
  }
}

