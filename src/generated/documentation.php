<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/documentation.proto
//   Date: 2016-11-23 22:55:01

namespace google\api {

  class Documentation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $summary = null;
    
    /**  @var \google\api\Page[]  */
    public $pages = array();
    
    /**  @var \google\api\DocumentationRule[]  */
    public $rules = array();
    
    /**  @var string */
    public $documentation_root_url = null;
    
    /**  @var string */
    public $overview = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Documentation');

      // OPTIONAL STRING summary = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "summary";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE pages = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pages";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Page';
      $descriptor->addField($f);

      // REPEATED MESSAGE rules = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\DocumentationRule';
      $descriptor->addField($f);

      // OPTIONAL STRING documentation_root_url = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "documentation_root_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING overview = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "overview";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <summary> has a value
     *
     * @return boolean
     */
    public function hasSummary(){
      return $this->_has(1);
    }
    
    /**
     * Clear <summary> value
     *
     * @return \google\api\Documentation
     */
    public function clearSummary(){
      return $this->_clear(1);
    }
    
    /**
     * Get <summary> value
     *
     * @return string
     */
    public function getSummary(){
      return $this->_get(1);
    }
    
    /**
     * Set <summary> value
     *
     * @param string $value
     * @return \google\api\Documentation
     */
    public function setSummary( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pages> has a value
     *
     * @return boolean
     */
    public function hasPages(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pages> value
     *
     * @return \google\api\Documentation
     */
    public function clearPages(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pages> value
     *
     * @param int $idx
     * @return \google\api\Page
     */
    public function getPages($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <pages> value
     *
     * @param \google\api\Page $value
     * @return \google\api\Documentation
     */
    public function setPages(\google\api\Page $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <pages>
     *
     * @return \google\api\Page[]
     */
    public function getPagesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <pages>
     *
     * @param \google\api\Page $value
     * @return \google\api\Documentation
     */
    public function addPages(\google\api\Page $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <rules> has a value
     *
     * @return boolean
     */
    public function hasRules(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rules> value
     *
     * @return \google\api\Documentation
     */
    public function clearRules(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rules> value
     *
     * @param int $idx
     * @return \google\api\DocumentationRule
     */
    public function getRules($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <rules> value
     *
     * @param \google\api\DocumentationRule $value
     * @return \google\api\Documentation
     */
    public function setRules(\google\api\DocumentationRule $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <rules>
     *
     * @return \google\api\DocumentationRule[]
     */
    public function getRulesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <rules>
     *
     * @param \google\api\DocumentationRule $value
     * @return \google\api\Documentation
     */
    public function addRules(\google\api\DocumentationRule $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <documentation_root_url> has a value
     *
     * @return boolean
     */
    public function hasDocumentationRootUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <documentation_root_url> value
     *
     * @return \google\api\Documentation
     */
    public function clearDocumentationRootUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <documentation_root_url> value
     *
     * @return string
     */
    public function getDocumentationRootUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <documentation_root_url> value
     *
     * @param string $value
     * @return \google\api\Documentation
     */
    public function setDocumentationRootUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <overview> has a value
     *
     * @return boolean
     */
    public function hasOverview(){
      return $this->_has(2);
    }
    
    /**
     * Clear <overview> value
     *
     * @return \google\api\Documentation
     */
    public function clearOverview(){
      return $this->_clear(2);
    }
    
    /**
     * Get <overview> value
     *
     * @return string
     */
    public function getOverview(){
      return $this->_get(2);
    }
    
    /**
     * Set <overview> value
     *
     * @param string $value
     * @return \google\api\Documentation
     */
    public function setOverview( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\api {

  class DocumentationRule extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $selector = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var string */
    public $deprecation_description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.DocumentationRule');

      // OPTIONAL STRING selector = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "selector";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING deprecation_description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "deprecation_description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <selector> has a value
     *
     * @return boolean
     */
    public function hasSelector(){
      return $this->_has(1);
    }
    
    /**
     * Clear <selector> value
     *
     * @return \google\api\DocumentationRule
     */
    public function clearSelector(){
      return $this->_clear(1);
    }
    
    /**
     * Get <selector> value
     *
     * @return string
     */
    public function getSelector(){
      return $this->_get(1);
    }
    
    /**
     * Set <selector> value
     *
     * @param string $value
     * @return \google\api\DocumentationRule
     */
    public function setSelector( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\api\DocumentationRule
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\api\DocumentationRule
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <deprecation_description> has a value
     *
     * @return boolean
     */
    public function hasDeprecationDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <deprecation_description> value
     *
     * @return \google\api\DocumentationRule
     */
    public function clearDeprecationDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <deprecation_description> value
     *
     * @return string
     */
    public function getDeprecationDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <deprecation_description> value
     *
     * @param string $value
     * @return \google\api\DocumentationRule
     */
    public function setDeprecationDescription( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\api {

  class Page extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var \google\api\Page[]  */
    public $subpages = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Page');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE subpages = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "subpages";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Page';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\api\Page
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\api\Page
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content> value
     *
     * @return \google\api\Page
     */
    public function clearContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \google\api\Page
     */
    public function setContent( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <subpages> has a value
     *
     * @return boolean
     */
    public function hasSubpages(){
      return $this->_has(3);
    }
    
    /**
     * Clear <subpages> value
     *
     * @return \google\api\Page
     */
    public function clearSubpages(){
      return $this->_clear(3);
    }
    
    /**
     * Get <subpages> value
     *
     * @param int $idx
     * @return \google\api\Page
     */
    public function getSubpages($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <subpages> value
     *
     * @param \google\api\Page $value
     * @return \google\api\Page
     */
    public function setSubpages(\google\api\Page $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <subpages>
     *
     * @return \google\api\Page[]
     */
    public function getSubpagesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <subpages>
     *
     * @param \google\api\Page $value
     * @return \google\api\Page
     */
    public function addSubpages(\google\api\Page $value){
     return $this->_add(3, $value);
    }
  }
}

