<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/rpc/error_details.proto
//   Date: 2016-11-23 22:55:01

namespace google\rpc {

  class RetryInfo extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Duration */
    public $retry_delay = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.RetryInfo');

      // OPTIONAL MESSAGE retry_delay = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "retry_delay";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <retry_delay> has a value
     *
     * @return boolean
     */
    public function hasRetryDelay(){
      return $this->_has(1);
    }
    
    /**
     * Clear <retry_delay> value
     *
     * @return \google\rpc\RetryInfo
     */
    public function clearRetryDelay(){
      return $this->_clear(1);
    }
    
    /**
     * Get <retry_delay> value
     *
     * @return \google\protobuf\Duration
     */
    public function getRetryDelay(){
      return $this->_get(1);
    }
    
    /**
     * Set <retry_delay> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\rpc\RetryInfo
     */
    public function setRetryDelay(\google\protobuf\Duration $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\rpc {

  class DebugInfo extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $stack_entries = array();
    
    /**  @var string */
    public $detail = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.DebugInfo');

      // REPEATED STRING stack_entries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stack_entries";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING detail = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "detail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stack_entries> has a value
     *
     * @return boolean
     */
    public function hasStackEntries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stack_entries> value
     *
     * @return \google\rpc\DebugInfo
     */
    public function clearStackEntries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stack_entries> value
     *
     * @param int $idx
     * @return string
     */
    public function getStackEntries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <stack_entries> value
     *
     * @param string $value
     * @return \google\rpc\DebugInfo
     */
    public function setStackEntries( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <stack_entries>
     *
     * @return string[]
     */
    public function getStackEntriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <stack_entries>
     *
     * @param string $value
     * @return \google\rpc\DebugInfo
     */
    public function addStackEntries( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <detail> has a value
     *
     * @return boolean
     */
    public function hasDetail(){
      return $this->_has(2);
    }
    
    /**
     * Clear <detail> value
     *
     * @return \google\rpc\DebugInfo
     */
    public function clearDetail(){
      return $this->_clear(2);
    }
    
    /**
     * Get <detail> value
     *
     * @return string
     */
    public function getDetail(){
      return $this->_get(2);
    }
    
    /**
     * Set <detail> value
     *
     * @param string $value
     * @return \google\rpc\DebugInfo
     */
    public function setDetail( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\rpc\QuotaFailure {

  class Violation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $subject = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.QuotaFailure.Violation');

      // OPTIONAL STRING subject = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "subject";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <subject> has a value
     *
     * @return boolean
     */
    public function hasSubject(){
      return $this->_has(1);
    }
    
    /**
     * Clear <subject> value
     *
     * @return \google\rpc\QuotaFailure\Violation
     */
    public function clearSubject(){
      return $this->_clear(1);
    }
    
    /**
     * Get <subject> value
     *
     * @return string
     */
    public function getSubject(){
      return $this->_get(1);
    }
    
    /**
     * Set <subject> value
     *
     * @param string $value
     * @return \google\rpc\QuotaFailure\Violation
     */
    public function setSubject( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\rpc\QuotaFailure\Violation
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\rpc\QuotaFailure\Violation
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\rpc {

  class QuotaFailure extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\QuotaFailure\Violation[]  */
    public $violations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.QuotaFailure');

      // REPEATED MESSAGE violations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "violations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\rpc\QuotaFailure\Violation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <violations> has a value
     *
     * @return boolean
     */
    public function hasViolations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <violations> value
     *
     * @return \google\rpc\QuotaFailure
     */
    public function clearViolations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <violations> value
     *
     * @param int $idx
     * @return \google\rpc\QuotaFailure\Violation
     */
    public function getViolations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <violations> value
     *
     * @param \google\rpc\QuotaFailure\Violation $value
     * @return \google\rpc\QuotaFailure
     */
    public function setViolations(\google\rpc\QuotaFailure\Violation $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <violations>
     *
     * @return \google\rpc\QuotaFailure\Violation[]
     */
    public function getViolationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <violations>
     *
     * @param \google\rpc\QuotaFailure\Violation $value
     * @return \google\rpc\QuotaFailure
     */
    public function addViolations(\google\rpc\QuotaFailure\Violation $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\rpc\BadRequest {

  class FieldViolation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.BadRequest.FieldViolation');

      // OPTIONAL STRING field = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field> value
     *
     * @return \google\rpc\BadRequest\FieldViolation
     */
    public function clearField(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field> value
     *
     * @return string
     */
    public function getField(){
      return $this->_get(1);
    }
    
    /**
     * Set <field> value
     *
     * @param string $value
     * @return \google\rpc\BadRequest\FieldViolation
     */
    public function setField( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\rpc\BadRequest\FieldViolation
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\rpc\BadRequest\FieldViolation
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\rpc {

  class BadRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\BadRequest\FieldViolation[]  */
    public $field_violations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.BadRequest');

      // REPEATED MESSAGE field_violations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_violations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\rpc\BadRequest\FieldViolation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_violations> has a value
     *
     * @return boolean
     */
    public function hasFieldViolations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_violations> value
     *
     * @return \google\rpc\BadRequest
     */
    public function clearFieldViolations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_violations> value
     *
     * @param int $idx
     * @return \google\rpc\BadRequest\FieldViolation
     */
    public function getFieldViolations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <field_violations> value
     *
     * @param \google\rpc\BadRequest\FieldViolation $value
     * @return \google\rpc\BadRequest
     */
    public function setFieldViolations(\google\rpc\BadRequest\FieldViolation $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <field_violations>
     *
     * @return \google\rpc\BadRequest\FieldViolation[]
     */
    public function getFieldViolationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <field_violations>
     *
     * @param \google\rpc\BadRequest\FieldViolation $value
     * @return \google\rpc\BadRequest
     */
    public function addFieldViolations(\google\rpc\BadRequest\FieldViolation $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\rpc {

  class RequestInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $request_id = null;
    
    /**  @var string */
    public $serving_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.RequestInfo');

      // OPTIONAL STRING request_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "request_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING serving_data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "serving_data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <request_id> has a value
     *
     * @return boolean
     */
    public function hasRequestId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <request_id> value
     *
     * @return \google\rpc\RequestInfo
     */
    public function clearRequestId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <request_id> value
     *
     * @return string
     */
    public function getRequestId(){
      return $this->_get(1);
    }
    
    /**
     * Set <request_id> value
     *
     * @param string $value
     * @return \google\rpc\RequestInfo
     */
    public function setRequestId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <serving_data> has a value
     *
     * @return boolean
     */
    public function hasServingData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <serving_data> value
     *
     * @return \google\rpc\RequestInfo
     */
    public function clearServingData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <serving_data> value
     *
     * @return string
     */
    public function getServingData(){
      return $this->_get(2);
    }
    
    /**
     * Set <serving_data> value
     *
     * @param string $value
     * @return \google\rpc\RequestInfo
     */
    public function setServingData( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\rpc {

  class ResourceInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $resource_type = null;
    
    /**  @var string */
    public $resource_name = null;
    
    /**  @var string */
    public $owner = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.ResourceInfo');

      // OPTIONAL STRING resource_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "resource_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING resource_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "resource_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING owner = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "owner";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resource_type> has a value
     *
     * @return boolean
     */
    public function hasResourceType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <resource_type> value
     *
     * @return \google\rpc\ResourceInfo
     */
    public function clearResourceType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <resource_type> value
     *
     * @return string
     */
    public function getResourceType(){
      return $this->_get(1);
    }
    
    /**
     * Set <resource_type> value
     *
     * @param string $value
     * @return \google\rpc\ResourceInfo
     */
    public function setResourceType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <resource_name> has a value
     *
     * @return boolean
     */
    public function hasResourceName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <resource_name> value
     *
     * @return \google\rpc\ResourceInfo
     */
    public function clearResourceName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <resource_name> value
     *
     * @return string
     */
    public function getResourceName(){
      return $this->_get(2);
    }
    
    /**
     * Set <resource_name> value
     *
     * @param string $value
     * @return \google\rpc\ResourceInfo
     */
    public function setResourceName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <owner> has a value
     *
     * @return boolean
     */
    public function hasOwner(){
      return $this->_has(3);
    }
    
    /**
     * Clear <owner> value
     *
     * @return \google\rpc\ResourceInfo
     */
    public function clearOwner(){
      return $this->_clear(3);
    }
    
    /**
     * Get <owner> value
     *
     * @return string
     */
    public function getOwner(){
      return $this->_get(3);
    }
    
    /**
     * Set <owner> value
     *
     * @param string $value
     * @return \google\rpc\ResourceInfo
     */
    public function setOwner( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(4);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\rpc\ResourceInfo
     */
    public function clearDescription(){
      return $this->_clear(4);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(4);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\rpc\ResourceInfo
     */
    public function setDescription( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\rpc\Help {

  class Link extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $description = null;
    
    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.Help.Link');

      // OPTIONAL STRING description = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(1);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\rpc\Help\Link
     */
    public function clearDescription(){
      return $this->_clear(1);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(1);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\rpc\Help\Link
     */
    public function setDescription( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\rpc\Help\Link
     */
    public function clearUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\rpc\Help\Link
     */
    public function setUrl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\rpc {

  class Help extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\Help\Link[]  */
    public $links = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.Help');

      // REPEATED MESSAGE links = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\rpc\Help\Link';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(1);
    }
    
    /**
     * Clear <links> value
     *
     * @return \google\rpc\Help
     */
    public function clearLinks(){
      return $this->_clear(1);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \google\rpc\Help\Link
     */
    public function getLinks($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \google\rpc\Help\Link $value
     * @return \google\rpc\Help
     */
    public function setLinks(\google\rpc\Help\Link $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \google\rpc\Help\Link[]
     */
    public function getLinksList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \google\rpc\Help\Link $value
     * @return \google\rpc\Help
     */
    public function addLinks(\google\rpc\Help\Link $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\rpc {

  class LocalizedMessage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $locale = null;
    
    /**  @var string */
    public $message = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.LocalizedMessage');

      // OPTIONAL STRING locale = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "locale";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING message = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <locale> has a value
     *
     * @return boolean
     */
    public function hasLocale(){
      return $this->_has(1);
    }
    
    /**
     * Clear <locale> value
     *
     * @return \google\rpc\LocalizedMessage
     */
    public function clearLocale(){
      return $this->_clear(1);
    }
    
    /**
     * Get <locale> value
     *
     * @return string
     */
    public function getLocale(){
      return $this->_get(1);
    }
    
    /**
     * Set <locale> value
     *
     * @param string $value
     * @return \google\rpc\LocalizedMessage
     */
    public function setLocale( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <message> value
     *
     * @return \google\rpc\LocalizedMessage
     */
    public function clearMessage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(2);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \google\rpc\LocalizedMessage
     */
    public function setMessage( $value){
      return $this->_set(2, $value);
    }
  }
}

