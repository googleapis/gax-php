<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/context.proto
//   Date: 2016-11-23 22:55:01

namespace google\api {

  class Context extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\ContextRule[]  */
    public $rules = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Context');

      // REPEATED MESSAGE rules = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\ContextRule';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rules> has a value
     *
     * @return boolean
     */
    public function hasRules(){
      return $this->_has(1);
    }
    
    /**
     * Clear <rules> value
     *
     * @return \google\api\Context
     */
    public function clearRules(){
      return $this->_clear(1);
    }
    
    /**
     * Get <rules> value
     *
     * @param int $idx
     * @return \google\api\ContextRule
     */
    public function getRules($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <rules> value
     *
     * @param \google\api\ContextRule $value
     * @return \google\api\Context
     */
    public function setRules(\google\api\ContextRule $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <rules>
     *
     * @return \google\api\ContextRule[]
     */
    public function getRulesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <rules>
     *
     * @param \google\api\ContextRule $value
     * @return \google\api\Context
     */
    public function addRules(\google\api\ContextRule $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\api {

  class ContextRule extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $selector = null;
    
    /**  @var string[]  */
    public $requested = array();
    
    /**  @var string[]  */
    public $provided = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.ContextRule');

      // OPTIONAL STRING selector = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "selector";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING requested = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "requested";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING provided = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "provided";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <selector> has a value
     *
     * @return boolean
     */
    public function hasSelector(){
      return $this->_has(1);
    }
    
    /**
     * Clear <selector> value
     *
     * @return \google\api\ContextRule
     */
    public function clearSelector(){
      return $this->_clear(1);
    }
    
    /**
     * Get <selector> value
     *
     * @return string
     */
    public function getSelector(){
      return $this->_get(1);
    }
    
    /**
     * Set <selector> value
     *
     * @param string $value
     * @return \google\api\ContextRule
     */
    public function setSelector( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <requested> has a value
     *
     * @return boolean
     */
    public function hasRequested(){
      return $this->_has(2);
    }
    
    /**
     * Clear <requested> value
     *
     * @return \google\api\ContextRule
     */
    public function clearRequested(){
      return $this->_clear(2);
    }
    
    /**
     * Get <requested> value
     *
     * @param int $idx
     * @return string
     */
    public function getRequested($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <requested> value
     *
     * @param string $value
     * @return \google\api\ContextRule
     */
    public function setRequested( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <requested>
     *
     * @return string[]
     */
    public function getRequestedList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <requested>
     *
     * @param string $value
     * @return \google\api\ContextRule
     */
    public function addRequested( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <provided> has a value
     *
     * @return boolean
     */
    public function hasProvided(){
      return $this->_has(3);
    }
    
    /**
     * Clear <provided> value
     *
     * @return \google\api\ContextRule
     */
    public function clearProvided(){
      return $this->_clear(3);
    }
    
    /**
     * Get <provided> value
     *
     * @param int $idx
     * @return string
     */
    public function getProvided($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <provided> value
     *
     * @param string $value
     * @return \google\api\ContextRule
     */
    public function setProvided( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <provided>
     *
     * @return string[]
     */
    public function getProvidedList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <provided>
     *
     * @param string $value
     * @return \google\api\ContextRule
     */
    public function addProvided( $value){
     return $this->_add(3, $value);
    }
  }
}

