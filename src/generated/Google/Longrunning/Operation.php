<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/longrunning/operations.proto

namespace Google\Longrunning;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * This resource represents a long-running operation that is the result of a
 * network API call.
 * </pre>
 *
 * Protobuf type <code>google.longrunning.Operation</code>
 */
class Operation extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The server-assigned name, which is only unique within the same service that
     * originally returns it. If you use the default HTTP mapping, the
     * `name` should have the format of `operations/some/unique/name`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * <pre>
     * Service-specific metadata associated with the operation.  It typically
     * contains progress information and common metadata such as create time.
     * Some services might not provide such metadata.  Any method that returns a
     * long-running operation should document the metadata type, if any.
     * </pre>
     *
     * <code>.google.protobuf.Any metadata = 2;</code>
     */
    private $metadata = null;
    /**
     * <pre>
     * If the value is `false`, it means the operation is still in progress.
     * If true, the operation is completed, and either `error` or `response` is
     * available.
     * </pre>
     *
     * <code>bool done = 3;</code>
     */
    private $done = false;
    protected $result;

    public function __construct() {
        \GPBMetadata\Google\Longrunning\Operations::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The server-assigned name, which is only unique within the same service that
     * originally returns it. If you use the default HTTP mapping, the
     * `name` should have the format of `operations/some/unique/name`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * The server-assigned name, which is only unique within the same service that
     * originally returns it. If you use the default HTTP mapping, the
     * `name` should have the format of `operations/some/unique/name`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * Service-specific metadata associated with the operation.  It typically
     * contains progress information and common metadata such as create time.
     * Some services might not provide such metadata.  Any method that returns a
     * long-running operation should document the metadata type, if any.
     * </pre>
     *
     * <code>.google.protobuf.Any metadata = 2;</code>
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     * <pre>
     * Service-specific metadata associated with the operation.  It typically
     * contains progress information and common metadata such as create time.
     * Some services might not provide such metadata.  Any method that returns a
     * long-running operation should document the metadata type, if any.
     * </pre>
     *
     * <code>.google.protobuf.Any metadata = 2;</code>
     */
    public function setMetadata(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->metadata = $var;
    }

    /**
     * <pre>
     * If the value is `false`, it means the operation is still in progress.
     * If true, the operation is completed, and either `error` or `response` is
     * available.
     * </pre>
     *
     * <code>bool done = 3;</code>
     */
    public function getDone()
    {
        return $this->done;
    }

    /**
     * <pre>
     * If the value is `false`, it means the operation is still in progress.
     * If true, the operation is completed, and either `error` or `response` is
     * available.
     * </pre>
     *
     * <code>bool done = 3;</code>
     */
    public function setDone($var)
    {
        GPBUtil::checkBool($var);
        $this->done = $var;
    }

    /**
     * <pre>
     * The error result of the operation in case of failure or cancellation.
     * </pre>
     *
     * <code>.google.rpc.Status error = 4;</code>
     */
    public function getError()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * The error result of the operation in case of failure or cancellation.
     * </pre>
     *
     * <code>.google.rpc.Status error = 4;</code>
     */
    public function setError(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Rpc\Status::class);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * The normal response of the operation in case of success.  If the original
     * method returns no data on success, such as `Delete`, the response is
     * `google.protobuf.Empty`.  If the original method is standard
     * `Get`/`Create`/`Update`, the response should be the resource.  For other
     * methods, the response should have the type `XxxResponse`, where `Xxx`
     * is the original method name.  For example, if the original method name
     * is `TakeSnapshot()`, the inferred response type is
     * `TakeSnapshotResponse`.
     * </pre>
     *
     * <code>.google.protobuf.Any response = 5;</code>
     */
    public function getResponse()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * The normal response of the operation in case of success.  If the original
     * method returns no data on success, such as `Delete`, the response is
     * `google.protobuf.Empty`.  If the original method is standard
     * `Get`/`Create`/`Update`, the response should be the resource.  For other
     * methods, the response should have the type `XxxResponse`, where `Xxx`
     * is the original method name.  For example, if the original method name
     * is `TakeSnapshot()`, the inferred response type is
     * `TakeSnapshotResponse`.
     * </pre>
     *
     * <code>.google.protobuf.Any response = 5;</code>
     */
    public function setResponse(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->writeOneof(5, $var);
    }

    public function getResult()
    {
        return $this->whichOneof("result");
    }

}

