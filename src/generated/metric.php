<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/metric.proto
//   Date: 2016-11-23 22:55:01

namespace google\api\MetricDescriptor {

  class MetricKind extends \DrSlump\Protobuf\Enum {
    const METRIC_KIND_UNSPECIFIED = 0;
    const GAUGE = 1;
    const DELTA = 2;
    const CUMULATIVE = 3;
  }
}
namespace google\api\MetricDescriptor {

  class ValueType extends \DrSlump\Protobuf\Enum {
    const VALUE_TYPE_UNSPECIFIED = 0;
    const BOOL = 1;
    const INT64 = 2;
    const DOUBLE = 3;
    const STRING = 4;
    const DISTRIBUTION = 5;
    const MONEY = 6;
  }
}
namespace google\api {

  class MetricDescriptor extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \google\api\LabelDescriptor[]  */
    public $labels = array();
    
    /**  @var int - \google\api\MetricDescriptor\MetricKind */
    public $metric_kind = null;
    
    /**  @var int - \google\api\MetricDescriptor\ValueType */
    public $value_type = null;
    
    /**  @var string */
    public $unit = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var string */
    public $display_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.MetricDescriptor');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\LabelDescriptor';
      $descriptor->addField($f);

      // OPTIONAL ENUM metric_kind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "metric_kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MetricDescriptor\MetricKind';
      $descriptor->addField($f);

      // OPTIONAL ENUM value_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "value_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\MetricDescriptor\ValueType';
      $descriptor->addField($f);

      // OPTIONAL STRING unit = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "unit";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\api\MetricDescriptor
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(8);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \google\api\MetricDescriptor
     */
    public function setType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(2);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearLabels(){
      return $this->_clear(2);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\api\LabelDescriptor
     */
    public function getLabels($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\api\LabelDescriptor $value
     * @return \google\api\MetricDescriptor
     */
    public function setLabels(\google\api\LabelDescriptor $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\api\LabelDescriptor[]
     */
    public function getLabelsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\api\LabelDescriptor $value
     * @return \google\api\MetricDescriptor
     */
    public function addLabels(\google\api\LabelDescriptor $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <metric_kind> has a value
     *
     * @return boolean
     */
    public function hasMetricKind(){
      return $this->_has(3);
    }
    
    /**
     * Clear <metric_kind> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearMetricKind(){
      return $this->_clear(3);
    }
    
    /**
     * Get <metric_kind> value
     *
     * @return int - \google\api\MetricDescriptor\MetricKind
     */
    public function getMetricKind(){
      return $this->_get(3);
    }
    
    /**
     * Set <metric_kind> value
     *
     * @param int - \google\api\MetricDescriptor\MetricKind $value
     * @return \google\api\MetricDescriptor
     */
    public function setMetricKind( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <value_type> has a value
     *
     * @return boolean
     */
    public function hasValueType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <value_type> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearValueType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <value_type> value
     *
     * @return int - \google\api\MetricDescriptor\ValueType
     */
    public function getValueType(){
      return $this->_get(4);
    }
    
    /**
     * Set <value_type> value
     *
     * @param int - \google\api\MetricDescriptor\ValueType $value
     * @return \google\api\MetricDescriptor
     */
    public function setValueType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <unit> has a value
     *
     * @return boolean
     */
    public function hasUnit(){
      return $this->_has(5);
    }
    
    /**
     * Clear <unit> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearUnit(){
      return $this->_clear(5);
    }
    
    /**
     * Get <unit> value
     *
     * @return string
     */
    public function getUnit(){
      return $this->_get(5);
    }
    
    /**
     * Set <unit> value
     *
     * @param string $value
     * @return \google\api\MetricDescriptor
     */
    public function setUnit( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(6);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearDescription(){
      return $this->_clear(6);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(6);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\api\MetricDescriptor
     */
    public function setDescription( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\api\MetricDescriptor
     */
    public function clearDisplayName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(7);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\api\MetricDescriptor
     */
    public function setDisplayName( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\api\Metric {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Metric.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\api\Metric\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\api\Metric\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\api\Metric\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\api\Metric\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\api {

  class Metric extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $type = null;
    
    /**  @var \google\api\Metric\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Metric');

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Metric\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\api\Metric
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \google\api\Metric
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(2);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\api\Metric
     */
    public function clearLabels(){
      return $this->_clear(2);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\api\Metric\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\api\Metric\LabelsEntry $value
     * @return \google\api\Metric
     */
    public function setLabels(\google\api\Metric\LabelsEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\api\Metric\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\api\Metric\LabelsEntry $value
     * @return \google\api\Metric
     */
    public function addLabels(\google\api\Metric\LabelsEntry $value){
     return $this->_add(2, $value);
    }
  }
}

