<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/label.proto
//   Date: 2016-11-23 22:55:01

namespace google\api\LabelDescriptor {

  class ValueType extends \DrSlump\Protobuf\Enum {
    const STRING = 0;
    const BOOL = 1;
    const INT64 = 2;
  }
}
namespace google\api {

  class LabelDescriptor extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int - \google\api\LabelDescriptor\ValueType */
    public $value_type = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.LabelDescriptor');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM value_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\LabelDescriptor\ValueType';
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\api\LabelDescriptor
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\api\LabelDescriptor
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value_type> has a value
     *
     * @return boolean
     */
    public function hasValueType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value_type> value
     *
     * @return \google\api\LabelDescriptor
     */
    public function clearValueType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value_type> value
     *
     * @return int - \google\api\LabelDescriptor\ValueType
     */
    public function getValueType(){
      return $this->_get(2);
    }
    
    /**
     * Set <value_type> value
     *
     * @param int - \google\api\LabelDescriptor\ValueType $value
     * @return \google\api\LabelDescriptor
     */
    public function setValueType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\api\LabelDescriptor
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\api\LabelDescriptor
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
  }
}

