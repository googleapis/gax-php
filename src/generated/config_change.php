<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/config_change.proto
//   Date: 2016-11-23 22:55:01

namespace google\api {

  class ChangeType extends \DrSlump\Protobuf\Enum {
    const CHANGE_TYPE_UNSPECIFIED = 0;
    const ADDED = 1;
    const REMOVED = 2;
    const MODIFIED = 3;
  }
}
namespace google\api {

  class ConfigChange extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $element = null;
    
    /**  @var string */
    public $old_value = null;
    
    /**  @var string */
    public $new_value = null;
    
    /**  @var int - \google\api\ChangeType */
    public $change_type = null;
    
    /**  @var \google\api\Advice[]  */
    public $advices = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.ConfigChange');

      // OPTIONAL STRING element = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "element";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING old_value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "old_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING new_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "new_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM change_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "change_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\ChangeType';
      $descriptor->addField($f);

      // REPEATED MESSAGE advices = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "advices";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\Advice';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <element> has a value
     *
     * @return boolean
     */
    public function hasElement(){
      return $this->_has(1);
    }
    
    /**
     * Clear <element> value
     *
     * @return \google\api\ConfigChange
     */
    public function clearElement(){
      return $this->_clear(1);
    }
    
    /**
     * Get <element> value
     *
     * @return string
     */
    public function getElement(){
      return $this->_get(1);
    }
    
    /**
     * Set <element> value
     *
     * @param string $value
     * @return \google\api\ConfigChange
     */
    public function setElement( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <old_value> has a value
     *
     * @return boolean
     */
    public function hasOldValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <old_value> value
     *
     * @return \google\api\ConfigChange
     */
    public function clearOldValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <old_value> value
     *
     * @return string
     */
    public function getOldValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <old_value> value
     *
     * @param string $value
     * @return \google\api\ConfigChange
     */
    public function setOldValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <new_value> has a value
     *
     * @return boolean
     */
    public function hasNewValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <new_value> value
     *
     * @return \google\api\ConfigChange
     */
    public function clearNewValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <new_value> value
     *
     * @return string
     */
    public function getNewValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <new_value> value
     *
     * @param string $value
     * @return \google\api\ConfigChange
     */
    public function setNewValue( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <change_type> has a value
     *
     * @return boolean
     */
    public function hasChangeType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <change_type> value
     *
     * @return \google\api\ConfigChange
     */
    public function clearChangeType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <change_type> value
     *
     * @return int - \google\api\ChangeType
     */
    public function getChangeType(){
      return $this->_get(4);
    }
    
    /**
     * Set <change_type> value
     *
     * @param int - \google\api\ChangeType $value
     * @return \google\api\ConfigChange
     */
    public function setChangeType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <advices> has a value
     *
     * @return boolean
     */
    public function hasAdvices(){
      return $this->_has(5);
    }
    
    /**
     * Clear <advices> value
     *
     * @return \google\api\ConfigChange
     */
    public function clearAdvices(){
      return $this->_clear(5);
    }
    
    /**
     * Get <advices> value
     *
     * @param int $idx
     * @return \google\api\Advice
     */
    public function getAdvices($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <advices> value
     *
     * @param \google\api\Advice $value
     * @return \google\api\ConfigChange
     */
    public function setAdvices(\google\api\Advice $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <advices>
     *
     * @return \google\api\Advice[]
     */
    public function getAdvicesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <advices>
     *
     * @param \google\api\Advice $value
     * @return \google\api\ConfigChange
     */
    public function addAdvices(\google\api\Advice $value){
     return $this->_add(5, $value);
    }
  }
}

namespace google\api {

  class Advice extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Advice');

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\api\Advice
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\api\Advice
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
  }
}

