<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/rpc/status.proto
//   Date: 2016-11-23 22:55:01

namespace google\rpc {

  class Status extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $code = null;
    
    /**  @var string */
    public $message = null;
    
    /**  @var \google\protobuf\Any[]  */
    public $details = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.rpc.Status');

      // OPTIONAL INT32 code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING message = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE details = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "details";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \google\rpc\Status
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \google\rpc\Status
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <message> value
     *
     * @return \google\rpc\Status
     */
    public function clearMessage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(2);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \google\rpc\Status
     */
    public function setMessage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <details> has a value
     *
     * @return boolean
     */
    public function hasDetails(){
      return $this->_has(3);
    }
    
    /**
     * Clear <details> value
     *
     * @return \google\rpc\Status
     */
    public function clearDetails(){
      return $this->_clear(3);
    }
    
    /**
     * Get <details> value
     *
     * @param int $idx
     * @return \google\protobuf\Any
     */
    public function getDetails($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <details> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\rpc\Status
     */
    public function setDetails(\google\protobuf\Any $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <details>
     *
     * @return \google\protobuf\Any[]
     */
    public function getDetailsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <details>
     *
     * @param \google\protobuf\Any $value
     * @return \google\rpc\Status
     */
    public function addDetails(\google\protobuf\Any $value){
     return $this->_add(3, $value);
    }
  }
}

