<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/showcase/v1beta1/testing.proto

namespace Google\Showcase\V1beta1\Test;

use UnexpectedValueException;

/**
 * Whether or not a test is required, recommended, or optional.
 *
 * Protobuf type <code>google.showcase.v1beta1.Test.ExpectationLevel</code>
 */
class ExpectationLevel
{
    /**
     * Generated from protobuf enum <code>EXPECTATION_LEVEL_UNSPECIFIED = 0;</code>
     */
    const EXPECTATION_LEVEL_UNSPECIFIED = 0;
    /**
     * This test is strictly required.
     *
     * Generated from protobuf enum <code>REQUIRED = 1;</code>
     */
    const REQUIRED = 1;
    /**
     * This test is recommended.
     * If a generator explicitly ignores a recommended test (see `DeleteTest`),
     * then the report may still pass, but with a warning.
     * If a generator skips a recommended test and does not explicitly
     * express that intention, the report will fail.
     *
     * Generated from protobuf enum <code>RECOMMENDED = 2;</code>
     */
    const RECOMMENDED = 2;
    /**
     * This test is optional.
     * If a generator explicitly ignores an optional test (see `DeleteTest`),
     * then the report may still pass, and no warning will be issued.
     * If a generator skips an optional test and does not explicitly
     * express that intention, the report may still pass, but with a
     * warning.
     *
     * Generated from protobuf enum <code>OPTIONAL = 3;</code>
     */
    const OPTIONAL = 3;

    private static $valueToName = [
        self::EXPECTATION_LEVEL_UNSPECIFIED => 'EXPECTATION_LEVEL_UNSPECIFIED',
        self::REQUIRED => 'REQUIRED',
        self::RECOMMENDED => 'RECOMMENDED',
        self::OPTIONAL => 'OPTIONAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ExpectationLevel::class, \Google\Showcase\V1beta1\Test_ExpectationLevel::class);

