<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/showcase/v1beta1/testing.proto

namespace Google\Showcase\V1beta1\Session;

use UnexpectedValueException;

/**
 * The specification versions understood by Showcase.
 *
 * Protobuf type <code>google.showcase.v1beta1.Session.Version</code>
 */
class Version
{
    /**
     * Unspecified version. If passed on creation, the session will default
     * to using the latest stable release.
     *
     * Generated from protobuf enum <code>VERSION_UNSPECIFIED = 0;</code>
     */
    const VERSION_UNSPECIFIED = 0;
    /**
     * The latest v1. Currently, this is v1.0.
     *
     * Generated from protobuf enum <code>V1_LATEST = 1;</code>
     */
    const V1_LATEST = 1;
    /**
     * v1.0. (Until the spec is "GA", this will be a moving target.)
     *
     * Generated from protobuf enum <code>V1_0 = 2;</code>
     */
    const V1_0 = 2;

    private static $valueToName = [
        self::VERSION_UNSPECIFIED => 'VERSION_UNSPECIFIED',
        self::V1_LATEST => 'V1_LATEST',
        self::V1_0 => 'V1_0',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Version::class, \Google\Showcase\V1beta1\Session_Version::class);

