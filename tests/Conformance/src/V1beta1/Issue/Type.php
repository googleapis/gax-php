<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/showcase/v1beta1/testing.proto

namespace Google\Showcase\V1beta1\Issue;

use UnexpectedValueException;

/**
 * The different potential types of issues.
 *
 * Protobuf type <code>google.showcase.v1beta1.Issue.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>TYPE_UNSPECIFIED = 0;</code>
     */
    const TYPE_UNSPECIFIED = 0;
    /**
     * The test was never instrumented.
     *
     * Generated from protobuf enum <code>SKIPPED = 1;</code>
     */
    const SKIPPED = 1;
    /**
     * The test was started but never confirmed.
     *
     * Generated from protobuf enum <code>PENDING = 2;</code>
     */
    const PENDING = 2;
    /**
     * The test was instrumented, but Showcase got an unexpected
     * value when the generator tried to confirm success.
     *
     * Generated from protobuf enum <code>INCORRECT_CONFIRMATION = 3;</code>
     */
    const INCORRECT_CONFIRMATION = 3;

    private static $valueToName = [
        self::TYPE_UNSPECIFIED => 'TYPE_UNSPECIFIED',
        self::SKIPPED => 'SKIPPED',
        self::PENDING => 'PENDING',
        self::INCORRECT_CONFIRMATION => 'INCORRECT_CONFIRMATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Google\Showcase\V1beta1\Issue_Type::class);

