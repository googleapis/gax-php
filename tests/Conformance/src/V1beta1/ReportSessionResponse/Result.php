<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/showcase/v1beta1/testing.proto

namespace Google\Showcase\V1beta1\ReportSessionResponse;

use UnexpectedValueException;

/**
 * The topline state of the report.
 *
 * Protobuf type <code>google.showcase.v1beta1.ReportSessionResponse.Result</code>
 */
class Result
{
    /**
     * Generated from protobuf enum <code>RESULT_UNSPECIFIED = 0;</code>
     */
    const RESULT_UNSPECIFIED = 0;
    /**
     * The session is complete, and everything passed.
     *
     * Generated from protobuf enum <code>PASSED = 1;</code>
     */
    const PASSED = 1;
    /**
     * The session had an explicit failure.
     *
     * Generated from protobuf enum <code>FAILED = 2;</code>
     */
    const FAILED = 2;
    /**
     * The session is incomplete. This is a failure response.
     *
     * Generated from protobuf enum <code>INCOMPLETE = 3;</code>
     */
    const INCOMPLETE = 3;

    private static $valueToName = [
        self::RESULT_UNSPECIFIED => 'RESULT_UNSPECIFIED',
        self::PASSED => 'PASSED',
        self::FAILED => 'FAILED',
        self::INCOMPLETE => 'INCOMPLETE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \Google\Showcase\V1beta1\ReportSessionResponse_Result::class);

