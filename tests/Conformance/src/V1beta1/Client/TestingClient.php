<?php
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/showcase/v1beta1/testing.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Showcase\V1beta1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Showcase\V1beta1\CreateSessionRequest;
use Google\Showcase\V1beta1\DeleteSessionRequest;
use Google\Showcase\V1beta1\DeleteTestRequest;
use Google\Showcase\V1beta1\GetSessionRequest;
use Google\Showcase\V1beta1\ListSessionsRequest;
use Google\Showcase\V1beta1\ListTestsRequest;
use Google\Showcase\V1beta1\ReportSessionRequest;
use Google\Showcase\V1beta1\ReportSessionResponse;
use Google\Showcase\V1beta1\Session;
use Google\Showcase\V1beta1\VerifyTestRequest;
use Google\Showcase\V1beta1\VerifyTestResponse;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Log\LoggerInterface;

/**
 * Service Description: A service to facilitate running discrete sets of tests
 * against Showcase.
 * Adding this comment with special characters for comment formatting tests:
 * 1. (abra->kadabra->alakazam)
 * 2) [Nonsense][]: `pokemon/&#42;/psychic/*`
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @experimental
 *
 * @method PromiseInterface<Session> createSessionAsync(CreateSessionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<void> deleteSessionAsync(DeleteSessionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<void> deleteTestAsync(DeleteTestRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Session> getSessionAsync(GetSessionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listSessionsAsync(ListSessionsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listTestsAsync(ListTestsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<ReportSessionResponse> reportSessionAsync(ReportSessionRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<VerifyTestResponse> verifyTestAsync(VerifyTestRequest $request, array $optionalArgs = [])
 */
final class TestingClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.showcase.v1beta1.Testing';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'localhost:7469';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/testing_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/testing_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/testing_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/testing_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent a session
     * resource.
     *
     * @param string $session
     *
     * @return string The formatted session resource.
     *
     * @experimental
     */
    public static function sessionName(string $session): string
    {
        return self::getPathTemplate('session')->render([
            'session' => $session,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a test
     * resource.
     *
     * @param string $session
     * @param string $test
     *
     * @return string The formatted test resource.
     *
     * @experimental
     */
    public static function testName(string $session, string $test): string
    {
        return self::getPathTemplate('test')->render([
            'session' => $session,
            'test' => $test,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - session: sessions/{session}
     * - test: sessions/{session}/tests/{test}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string  $formattedName The formatted name string
     * @param ?string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     *
     * @experimental
     */
    public static function parseName(string $formattedName, ?string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'localhost:7469:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *           *Important*: If you accept a credential configuration (credential
     *           JSON/File/Stream) from an external source for authentication to Google Cloud
     *           Platform, you must validate it before providing it to any Google API or library.
     *           Providing an unvalidated credential configuration to Google APIs can compromise
     *           the security of your systems and data. For more information {@see
     *           https://cloud.google.com/docs/authentication/external/externally-sourced-credentials}
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     *     @type false|LoggerInterface $logger
     *           A PSR-3 compliant logger. If set to false, logging is disabled, ignoring the
     *           'GOOGLE_SDK_PHP_LOGGING' environment flag
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * Creates a new testing session.
     * Adding this comment with special characters for comment formatting tests:
     * 1. (abra->kadabra->alakazam)
     * 2) [Nonsense][]: `pokemon/&#42;/psychic/*`
     *
     * The async variant is {@see TestingClient::createSessionAsync()} .
     *
     * @example samples/V1beta1/TestingClient/create_session.php
     *
     * @param CreateSessionRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Session
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function createSession(CreateSessionRequest $request, array $callOptions = []): Session
    {
        return $this->startApiCall('CreateSession', $request, $callOptions)->wait();
    }

    /**
     * Delete a test session.
     *
     * The async variant is {@see TestingClient::deleteSessionAsync()} .
     *
     * @example samples/V1beta1/TestingClient/delete_session.php
     *
     * @param DeleteSessionRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteSession(DeleteSessionRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteSession', $request, $callOptions)->wait();
    }

    /**
     * Explicitly decline to implement a test.
     *
     * This removes the test from subsequent `ListTests` calls, and
     * attempting to do the test will error.
     *
     * This method will error if attempting to delete a required test.
     *
     * The async variant is {@see TestingClient::deleteTestAsync()} .
     *
     * @example samples/V1beta1/TestingClient/delete_test.php
     *
     * @param DeleteTestRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteTest(DeleteTestRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteTest', $request, $callOptions)->wait();
    }

    /**
     * Gets a testing session.
     *
     * The async variant is {@see TestingClient::getSessionAsync()} .
     *
     * @example samples/V1beta1/TestingClient/get_session.php
     *
     * @param GetSessionRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Session
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getSession(GetSessionRequest $request, array $callOptions = []): Session
    {
        return $this->startApiCall('GetSession', $request, $callOptions)->wait();
    }

    /**
     * Lists the current test sessions.
     *
     * The async variant is {@see TestingClient::listSessionsAsync()} .
     *
     * @example samples/V1beta1/TestingClient/list_sessions.php
     *
     * @param ListSessionsRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listSessions(ListSessionsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListSessions', $request, $callOptions);
    }

    /**
     * List the tests of a sessesion.
     *
     * The async variant is {@see TestingClient::listTestsAsync()} .
     *
     * @example samples/V1beta1/TestingClient/list_tests.php
     *
     * @param ListTestsRequest $request     A request to house fields associated with the call.
     * @param array            $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listTests(ListTestsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListTests', $request, $callOptions);
    }

    /**
     * Report on the status of a session.
     * This generates a report detailing which tests have been completed,
     * and an overall rollup.
     *
     * The async variant is {@see TestingClient::reportSessionAsync()} .
     *
     * @example samples/V1beta1/TestingClient/report_session.php
     *
     * @param ReportSessionRequest $request     A request to house fields associated with the call.
     * @param array                $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return ReportSessionResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function reportSession(ReportSessionRequest $request, array $callOptions = []): ReportSessionResponse
    {
        return $this->startApiCall('ReportSession', $request, $callOptions)->wait();
    }

    /**
     * Register a response to a test.
     *
     * In cases where a test involves registering a final answer at the
     * end of the test, this method provides the means to do so.
     *
     * The async variant is {@see TestingClient::verifyTestAsync()} .
     *
     * @example samples/V1beta1/TestingClient/verify_test.php
     *
     * @param VerifyTestRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return VerifyTestResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function verifyTest(VerifyTestRequest $request, array $callOptions = []): VerifyTestResponse
    {
        return $this->startApiCall('VerifyTest', $request, $callOptions)->wait();
    }
}
