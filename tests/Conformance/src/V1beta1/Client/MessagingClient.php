<?php
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/showcase/v1beta1/messaging.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Showcase\V1beta1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\BidiStream;
use Google\ApiCore\ClientStream;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\ResourceHelperTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\ServerStream;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Client\OperationsClient;
use Google\LongRunning\Operation;
use Google\Showcase\V1beta1\Blurb;
use Google\Showcase\V1beta1\CreateBlurbRequest;
use Google\Showcase\V1beta1\CreateRoomRequest;
use Google\Showcase\V1beta1\DeleteBlurbRequest;
use Google\Showcase\V1beta1\DeleteRoomRequest;
use Google\Showcase\V1beta1\GetBlurbRequest;
use Google\Showcase\V1beta1\GetRoomRequest;
use Google\Showcase\V1beta1\ListBlurbsRequest;
use Google\Showcase\V1beta1\ListRoomsRequest;
use Google\Showcase\V1beta1\Room;
use Google\Showcase\V1beta1\SearchBlurbsRequest;
use Google\Showcase\V1beta1\StreamBlurbsRequest;
use Google\Showcase\V1beta1\UpdateBlurbRequest;
use Google\Showcase\V1beta1\UpdateRoomRequest;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Log\LoggerInterface;

/**
 * Service Description: A simple messaging service that implements chat rooms and profile posts.
 *
 * This messaging service showcases the features that API clients
 * generated by gapic-generators implement.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * Many parameters require resource names to be formatted in a particular way. To
 * assist with these names, this class includes a format method for each type of
 * name, and additionally a parseName method to extract the individual identifiers
 * contained within formatted names that are returned by the API.
 *
 * @experimental
 *
 * @method PromiseInterface<Blurb> createBlurbAsync(CreateBlurbRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Room> createRoomAsync(CreateRoomRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<void> deleteBlurbAsync(DeleteBlurbRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<void> deleteRoomAsync(DeleteRoomRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Blurb> getBlurbAsync(GetBlurbRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Room> getRoomAsync(GetRoomRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listBlurbsAsync(ListBlurbsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> listRoomsAsync(ListRoomsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> searchBlurbsAsync(SearchBlurbsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Blurb> updateBlurbAsync(UpdateBlurbRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<Room> updateRoomAsync(UpdateRoomRequest $request, array $optionalArgs = [])
 */
final class MessagingClient
{
    use GapicClientTrait;
    use ResourceHelperTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.showcase.v1beta1.Messaging';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'localhost:7469';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/messaging_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/messaging_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/messaging_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/messaging_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     *
     * @experimental
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     *
     * @experimental
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Create the default operation client for the service.
     *
     * @param array $options ClientOptions for the client.
     *
     * @return OperationsClient
     */
    private function createOperationsClient(array $options)
    {
        // Unset client-specific configuration options
        unset($options['serviceName'], $options['clientConfig'], $options['descriptorsConfigPath']);

        if (isset($options['operationsClient'])) {
            return $options['operationsClient'];
        }

        return new OperationsClient($options);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a blurb
     * resource.
     *
     * @param string $user
     * @param string $blurb
     *
     * @return string The formatted blurb resource.
     *
     * @experimental
     */
    public static function blurbName(string $user, string $blurb): string
    {
        return self::getPathTemplate('blurb')->render([
            'user' => $user,
            'blurb' => $blurb,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a room
     * resource.
     *
     * @param string $room
     *
     * @return string The formatted room resource.
     *
     * @experimental
     */
    public static function roomName(string $room): string
    {
        return self::getPathTemplate('room')->render([
            'room' => $room,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a room_blurb
     * resource.
     *
     * @param string $room
     * @param string $blurb
     *
     * @return string The formatted room_blurb resource.
     *
     * @experimental
     */
    public static function roomBlurbName(string $room, string $blurb): string
    {
        return self::getPathTemplate('roomBlurb')->render([
            'room' => $room,
            'blurb' => $blurb,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * room_legacy_room resource.
     *
     * @param string $room
     * @param string $legacyRoom
     *
     * @return string The formatted room_legacy_room resource.
     *
     * @experimental
     */
    public static function roomLegacyRoomName(string $room, string $legacyRoom): string
    {
        return self::getPathTemplate('roomLegacyRoom')->render([
            'room' => $room,
            'legacy_room' => $legacyRoom,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * room_legacy_room_blurb resource.
     *
     * @param string $room
     * @param string $legacyRoom
     * @param string $blurb
     *
     * @return string The formatted room_legacy_room_blurb resource.
     *
     * @experimental
     */
    public static function roomLegacyRoomBlurbName(string $room, string $legacyRoom, string $blurb): string
    {
        return self::getPathTemplate('roomLegacyRoomBlurb')->render([
            'room' => $room,
            'legacy_room' => $legacyRoom,
            'blurb' => $blurb,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a user
     * resource.
     *
     * @param string $user
     *
     * @return string The formatted user resource.
     *
     * @experimental
     */
    public static function userName(string $user): string
    {
        return self::getPathTemplate('user')->render([
            'user' => $user,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a user_blurb
     * resource.
     *
     * @param string $user
     * @param string $blurb
     *
     * @return string The formatted user_blurb resource.
     *
     * @experimental
     */
    public static function userBlurbName(string $user, string $blurb): string
    {
        return self::getPathTemplate('userBlurb')->render([
            'user' => $user,
            'blurb' => $blurb,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent a
     * user_blurb_legacy_user resource.
     *
     * @param string $user
     * @param string $blurb
     * @param string $legacyUser
     *
     * @return string The formatted user_blurb_legacy_user resource.
     *
     * @experimental
     */
    public static function userBlurbLegacyUserName(string $user, string $blurb, string $legacyUser): string
    {
        return self::getPathTemplate('userBlurbLegacyUser')->render([
            'user' => $user,
            'blurb' => $blurb,
            'legacy_user' => $legacyUser,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - blurb: users/{user}/blurbs/{blurb}
     * - room: rooms/{room}
     * - roomBlurb: rooms/{room}/blurbs/{blurb}
     * - roomLegacyRoom: rooms/{room}/legacy_room/{legacy_room}
     * - roomLegacyRoomBlurb: rooms/{room}/legacy_room/{legacy_room}/blurbs/{blurb}
     * - user: users/{user}
     * - userBlurb: users/{user}/blurbs/{blurb}
     * - userBlurbLegacyUser: users/{user}/blurbs/{blurb}/legacy/{legacy_user}
     *
     * The optional $template argument can be supplied to specify a particular pattern,
     * and must match one of the templates listed above. If no $template argument is
     * provided, or if the $template argument does not match one of the templates
     * listed, then parseName will check each of the supported templates, and return
     * the first match.
     *
     * @param string  $formattedName The formatted name string
     * @param ?string $template      Optional name of template to match
     *
     * @return array An associative array from name component IDs to component values.
     *
     * @throws ValidationException If $formattedName could not be matched.
     *
     * @experimental
     */
    public static function parseName(string $formattedName, ?string $template = null): array
    {
        return self::parseFormattedName($formattedName, $template);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'localhost:7469:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *           *Important*: If you accept a credential configuration (credential
     *           JSON/File/Stream) from an external source for authentication to Google Cloud
     *           Platform, you must validate it before providing it to any Google API or library.
     *           Providing an unvalidated credential configuration to Google APIs can compromise
     *           the security of your systems and data. For more information {@see
     *           https://cloud.google.com/docs/authentication/external/externally-sourced-credentials}
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     *     @type false|LoggerInterface $logger
     *           A PSR-3 compliant logger. If set to false, logging is disabled, ignoring the
     *           'GOOGLE_SDK_PHP_LOGGING' environment flag
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * This method starts a bidirectional stream that receives all blurbs that
     * are being created after the stream has started and sends requests to create
     * blurbs. If an invalid blurb is requested to be created, the stream will
     * close with an error.
     *
     * @example samples/V1beta1/MessagingClient/connect.php
     *
     * @param array $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return BidiStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function connect(array $callOptions = []): BidiStream
    {
        return $this->startApiCall('Connect', null, $callOptions);
    }

    /**
     * Creates a blurb. If the parent is a room, the blurb is understood to be a
     * message in that room. If the parent is a profile, the blurb is understood
     * to be a post on the profile.
     *
     * The async variant is {@see MessagingClient::createBlurbAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/create_blurb.php
     *
     * @param CreateBlurbRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Blurb
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function createBlurb(CreateBlurbRequest $request, array $callOptions = []): Blurb
    {
        return $this->startApiCall('CreateBlurb', $request, $callOptions)->wait();
    }

    /**
     * Creates a room.
     *
     * The async variant is {@see MessagingClient::createRoomAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/create_room.php
     *
     * @param CreateRoomRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Room
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function createRoom(CreateRoomRequest $request, array $callOptions = []): Room
    {
        return $this->startApiCall('CreateRoom', $request, $callOptions)->wait();
    }

    /**
     * Deletes a blurb.
     *
     * The async variant is {@see MessagingClient::deleteBlurbAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/delete_blurb.php
     *
     * @param DeleteBlurbRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteBlurb(DeleteBlurbRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteBlurb', $request, $callOptions)->wait();
    }

    /**
     * Deletes a room and all of its blurbs.
     *
     * The async variant is {@see MessagingClient::deleteRoomAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/delete_room.php
     *
     * @param DeleteRoomRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function deleteRoom(DeleteRoomRequest $request, array $callOptions = []): void
    {
        $this->startApiCall('DeleteRoom', $request, $callOptions)->wait();
    }

    /**
     * Retrieves the Blurb with the given resource name.
     *
     * The async variant is {@see MessagingClient::getBlurbAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/get_blurb.php
     *
     * @param GetBlurbRequest $request     A request to house fields associated with the call.
     * @param array           $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Blurb
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getBlurb(GetBlurbRequest $request, array $callOptions = []): Blurb
    {
        return $this->startApiCall('GetBlurb', $request, $callOptions)->wait();
    }

    /**
     * Retrieves the Room with the given resource name.
     *
     * The async variant is {@see MessagingClient::getRoomAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/get_room.php
     *
     * @param GetRoomRequest $request     A request to house fields associated with the call.
     * @param array          $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Room
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getRoom(GetRoomRequest $request, array $callOptions = []): Room
    {
        return $this->startApiCall('GetRoom', $request, $callOptions)->wait();
    }

    /**
     * Lists blurbs for a specific chat room or user profile depending on the
     * parent resource name.
     *
     * The async variant is {@see MessagingClient::listBlurbsAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/list_blurbs.php
     *
     * @param ListBlurbsRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listBlurbs(ListBlurbsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListBlurbs', $request, $callOptions);
    }

    /**
     * Lists all chat rooms.
     *
     * The async variant is {@see MessagingClient::listRoomsAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/list_rooms.php
     *
     * @param ListRoomsRequest $request     A request to house fields associated with the call.
     * @param array            $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function listRooms(ListRoomsRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('ListRooms', $request, $callOptions);
    }

    /**
     * This method searches through all blurbs across all rooms and profiles
     * for blurbs containing to words found in the query. Only posts that
     * contain an exact match of a queried word will be returned.
     *
     * The async variant is {@see MessagingClient::searchBlurbsAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/search_blurbs.php
     *
     * @param SearchBlurbsRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function searchBlurbs(SearchBlurbsRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('SearchBlurbs', $request, $callOptions)->wait();
    }

    /**
     * This is a stream to create multiple blurbs. If an invalid blurb is
     * requested to be created, the stream will close with an error.
     *
     * @example samples/V1beta1/MessagingClient/send_blurbs.php
     *
     * @param array $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return ClientStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function sendBlurbs(array $callOptions = []): ClientStream
    {
        return $this->startApiCall('SendBlurbs', null, $callOptions);
    }

    /**
     * This returns a stream that emits the blurbs that are created for a
     * particular chat room or user profile.
     *
     * @example samples/V1beta1/MessagingClient/stream_blurbs.php
     *
     * @param StreamBlurbsRequest $request     A request to house fields associated with the call.
     * @param array               $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return ServerStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function streamBlurbs(StreamBlurbsRequest $request, array $callOptions = []): ServerStream
    {
        return $this->startApiCall('StreamBlurbs', $request, $callOptions);
    }

    /**
     * Updates a blurb.
     *
     * The async variant is {@see MessagingClient::updateBlurbAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/update_blurb.php
     *
     * @param UpdateBlurbRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Blurb
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function updateBlurb(UpdateBlurbRequest $request, array $callOptions = []): Blurb
    {
        return $this->startApiCall('UpdateBlurb', $request, $callOptions)->wait();
    }

    /**
     * Updates a room.
     *
     * The async variant is {@see MessagingClient::updateRoomAsync()} .
     *
     * @example samples/V1beta1/MessagingClient/update_room.php
     *
     * @param UpdateRoomRequest $request     A request to house fields associated with the call.
     * @param array             $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return Room
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function updateRoom(UpdateRoomRequest $request, array $callOptions = []): Room
    {
        return $this->startApiCall('UpdateRoom', $request, $callOptions)->wait();
    }
}
