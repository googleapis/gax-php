<?php
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/showcase/v1beta1/compliance.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Showcase\V1beta1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Showcase\V1beta1\EnumRequest;
use Google\Showcase\V1beta1\EnumResponse;
use Google\Showcase\V1beta1\RepeatRequest;
use Google\Showcase\V1beta1\RepeatResponse;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Log\LoggerInterface;

/**
 * Service Description: This service is used to test that GAPICs implement various REST-related features correctly. This mostly means transcoding proto3 requests to REST format
 * correctly for various types of HTTP annotations, but it also includes verifying that unknown (numeric) enums received by clients can be round-tripped
 * correctly.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * @experimental
 *
 * @method PromiseInterface<EnumResponse> getEnumAsync(EnumRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataBodyAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataBodyInfoAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataBodyPatchAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataBodyPutAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataPathResourceAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataPathTrailingResourceAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataQueryAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<RepeatResponse> repeatDataSimplePathAsync(RepeatRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<EnumResponse> verifyEnumAsync(EnumResponse $request, array $optionalArgs = [])
 */
final class ComplianceClient
{
    use GapicClientTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.showcase.v1beta1.Compliance';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'localhost:7469';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The default scopes required by the service. */
    public static $serviceScopes = [];

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/compliance_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/compliance_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/compliance_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/compliance_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'localhost:7469:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *           *Important*: If you accept a credential configuration (credential
     *           JSON/File/Stream) from an external source for authentication to Google Cloud
     *           Platform, you must validate it before providing it to any Google API or library.
     *           Providing an unvalidated credential configuration to Google APIs can compromise
     *           the security of your systems and data. For more information {@see
     *           https://cloud.google.com/docs/authentication/external/externally-sourced-credentials}
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     *     @type false|LoggerInterface $logger
     *           A PSR-3 compliant logger. If set to false, logging is disabled, ignoring the
     *           'GOOGLE_SDK_PHP_LOGGING' environment flag
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * This method requests an enum value from the server. Depending on the contents of EnumRequest, the enum value returned will be a known enum declared in the
     * .proto file, or a made-up enum value the is unknown to the client. To verify that clients can round-trip unknown enum values they receive, use the
     * response from this RPC as the request to VerifyEnum()
     *
     * The values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run (this is needed for
     * VerifyEnum() to work) but are not guaranteed to be the same across separate Showcase server runs.
     *
     * The async variant is {@see ComplianceClient::getEnumAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/get_enum.php
     *
     * @param EnumRequest $request     A request to house fields associated with the call.
     * @param array       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return EnumResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function getEnum(EnumRequest $request, array $callOptions = []): EnumResponse
    {
        return $this->startApiCall('GetEnum', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request. This method exercises
     * sending the entire request object in the REST body.
     *
     * The async variant is {@see ComplianceClient::repeatDataBodyAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_body.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataBody(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataBody', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request. This method exercises
     * sending the a message-type field in the REST body. Per AIP-127, only
     * top-level, non-repeated fields can be sent this way.
     *
     * The async variant is {@see ComplianceClient::repeatDataBodyInfoAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_body_info.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataBodyInfo(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataBodyInfo', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request, using the HTTP PATCH method.
     *
     * The async variant is {@see ComplianceClient::repeatDataBodyPatchAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_body_patch.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataBodyPatch(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataBodyPatch', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request, using the HTTP PUT method.
     *
     * The async variant is {@see ComplianceClient::repeatDataBodyPutAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_body_put.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataBodyPut(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataBodyPut', $request, $callOptions)->wait();
    }

    /**
     * Same as RepeatDataSimplePath, but with a path resource.
     *
     * The async variant is {@see ComplianceClient::repeatDataPathResourceAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_path_resource.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataPathResource(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataPathResource', $request, $callOptions)->wait();
    }

    /**
     * Same as RepeatDataSimplePath, but with a trailing resource.
     *
     * The async variant is
     * {@see ComplianceClient::repeatDataPathTrailingResourceAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_path_trailing_resource.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataPathTrailingResource(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataPathTrailingResource', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request. This method exercises
     * sending all request fields as query parameters.
     *
     * The async variant is {@see ComplianceClient::repeatDataQueryAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_query.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataQuery(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataQuery', $request, $callOptions)->wait();
    }

    /**
     * This method echoes the ComplianceData request. This method exercises
     * sending some parameters as "simple" path variables (i.e., of the form
     * "/bar/{foo}" rather than "/{foo=bar/*}"), and the rest as query parameters.
     *
     * The async variant is {@see ComplianceClient::repeatDataSimplePathAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/repeat_data_simple_path.php
     *
     * @param RepeatRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return RepeatResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function repeatDataSimplePath(RepeatRequest $request, array $callOptions = []): RepeatResponse
    {
        return $this->startApiCall('RepeatDataSimplePath', $request, $callOptions)->wait();
    }

    /**
     * This method is used to verify that clients can round-trip enum values, which is particularly important for unknown enum values over REST. VerifyEnum()
     * verifies that its request, which is presumably the response that the client previously got to a GetEnum(), contains the correct data. If so, it responds
     * with the same EnumResponse; otherwise, the RPC errors.
     *
     * This works because the values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run,
     * although they are not guaranteed to be the same across separate Showcase server runs.
     *
     * The async variant is {@see ComplianceClient::verifyEnumAsync()} .
     *
     * @example samples/V1beta1/ComplianceClient/verify_enum.php
     *
     * @param EnumResponse $request     A request to house fields associated with the call.
     * @param array        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return EnumResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function verifyEnum(EnumResponse $request, array $callOptions = []): EnumResponse
    {
        return $this->startApiCall('VerifyEnum', $request, $callOptions)->wait();
    }
}
