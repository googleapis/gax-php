<?php
/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * Generated by gapic-generator-php from the file
 * https://github.com/googleapis/googleapis/blob/master/google/showcase/v1beta1/echo.proto
 * Updates to the above are reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Showcase\V1beta1\Client;

use Google\ApiCore\ApiException;
use Google\ApiCore\BidiStream;
use Google\ApiCore\ClientStream;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PagedListResponse;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\ServerStream;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\LongRunning\Client\OperationsClient;
use Google\LongRunning\Operation;
use Google\Showcase\V1beta1\BlockRequest;
use Google\Showcase\V1beta1\BlockResponse;
use Google\Showcase\V1beta1\EchoErrorDetailsRequest;
use Google\Showcase\V1beta1\EchoErrorDetailsResponse;
use Google\Showcase\V1beta1\EchoRequest;
use Google\Showcase\V1beta1\EchoResponse;
use Google\Showcase\V1beta1\ExpandRequest;
use Google\Showcase\V1beta1\FailEchoWithDetailsRequest;
use Google\Showcase\V1beta1\FailEchoWithDetailsResponse;
use Google\Showcase\V1beta1\PagedExpandLegacyRequest;
use Google\Showcase\V1beta1\PagedExpandRequest;
use Google\Showcase\V1beta1\PagedExpandResponse;
use Google\Showcase\V1beta1\WaitRequest;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Log\LoggerInterface;

/**
 * Service Description: This service is used showcase the four main types of rpcs - unary, server
 * side streaming, client side streaming, and bidirectional streaming. This
 * service also exposes methods that explicitly implement server delay, and
 * paginated calls. Set the 'showcase-trailer' metadata key on any method
 * to have the values echoed in the response trailers. Set the
 * 'x-goog-request-params' metadata key on any method to have the values
 * echoed in the response headers.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods.
 *
 * @experimental
 *
 * @method PromiseInterface<BlockResponse> blockAsync(BlockRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<EchoResponse> echoAsync(EchoRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<EchoErrorDetailsResponse> echoErrorDetailsAsync(EchoErrorDetailsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<FailEchoWithDetailsResponse> failEchoWithDetailsAsync(FailEchoWithDetailsRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> pagedExpandAsync(PagedExpandRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedExpandResponse> pagedExpandLegacyAsync(PagedExpandLegacyRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<PagedListResponse> pagedExpandLegacyMappedAsync(PagedExpandRequest $request, array $optionalArgs = [])
 * @method PromiseInterface<OperationResponse> waitAsync(WaitRequest $request, array $optionalArgs = [])
 */
final class EchoClient
{
    use GapicClientTrait;

    /** The name of the service. */
    private const SERVICE_NAME = 'google.showcase.v1beta1.Echo';

    /** The default address of the service. */
    private const SERVICE_ADDRESS = 'localhost:7469';

    /** The default port of the service. */
    private const DEFAULT_SERVICE_PORT = 443;

    /** The name of the code generator, to be included in the agent header. */
    private const CODEGEN_NAME = 'gapic';

    /** The api version of the service */
    private string $apiVersion = 'v1_20240408';

    /** The default scopes required by the service. */
    public static $serviceScopes = [];

    private $operationsClient;

    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'apiEndpoint' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/echo_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/echo_descriptor_config.php',
            'gcpApiConfigPath' => __DIR__ . '/../resources/echo_grpc_config.json',
            'credentialsConfig' => [
                'defaultScopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/echo_rest_client_config.php',
                ],
            ],
        ];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     *
     * @experimental
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started by a long
     * running API method. If $methodName is not provided, or does not match a long
     * running API method, then the operation can still be resumed, but the
     * OperationResponse object will not deserialize the final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName    The name of the method used to start the operation
     *
     * @return OperationResponse
     *
     * @experimental
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning']) ? $this->descriptors[$methodName]['longRunning'] : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Create the default operation client for the service.
     *
     * @param array $options ClientOptions for the client.
     *
     * @return OperationsClient
     */
    private function createOperationsClient(array $options)
    {
        // Unset client-specific configuration options
        unset($options['serviceName'], $options['clientConfig'], $options['descriptorsConfigPath']);

        if (isset($options['operationsClient'])) {
            return $options['operationsClient'];
        }

        return new OperationsClient($options);
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $apiEndpoint
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'localhost:7469:443'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *           *Important*: If you accept a credential configuration (credential
     *           JSON/File/Stream) from an external source for authentication to Google Cloud
     *           Platform, you must validate it before providing it to any Google API or library.
     *           Providing an unvalidated credential configuration to Google APIs can compromise
     *           the security of your systems and data. For more information {@see
     *           https://cloud.google.com/docs/authentication/external/externally-sourced-credentials}
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the
     *           client. For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()} .
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either
     *           a path to a JSON file, or a PHP array containing the decoded JSON data. By
     *           default this settings points to the default client config file, which is
     *           provided in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. May be either the string
     *           `rest` or `grpc`. Defaults to `grpc` if gRPC support is detected on the system.
     *           *Advanced usage*: Additionally, it is possible to pass in an already
     *           instantiated {@see \Google\ApiCore\Transport\TransportInterface} object. Note
     *           that when this object is provided, any settings in $transportConfig, and any
     *           $apiEndpoint setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'grpc' => [...],
     *               'rest' => [...],
     *           ];
     *           See the {@see \Google\ApiCore\Transport\GrpcTransport::build()} and
     *           {@see \Google\ApiCore\Transport\RestTransport::build()} methods for the
     *           supported options.
     *     @type callable $clientCertSource
     *           A callable which returns the client cert as a string. This can be used to
     *           provide a certificate and private key to the transport layer for mTLS.
     *     @type false|LoggerInterface $logger
     *           A PSR-3 compliant logger. If set to false, logging is disabled, ignoring the
     *           'GOOGLE_SDK_PHP_LOGGING' environment flag
     * }
     *
     * @throws ValidationException
     *
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /** Handles execution of the async variants for each documented method. */
    public function __call($method, $args)
    {
        if (substr($method, -5) !== 'Async') {
            trigger_error('Call to undefined method ' . __CLASS__ . "::$method()", E_USER_ERROR);
        }

        array_unshift($args, substr($method, 0, -5));
        return call_user_func_array([$this, 'startAsyncCall'], $args);
    }

    /**
     * This method will block (wait) for the requested amount of time
     * and then return the response or error.
     * This method showcases how a client handles delays or retries.
     *
     * The async variant is {@see EchoClient::blockAsync()} .
     *
     * @example samples/V1beta1/EchoClient/block.php
     *
     * @param BlockRequest $request     A request to house fields associated with the call.
     * @param array        $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return BlockResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function block(BlockRequest $request, array $callOptions = []): BlockResponse
    {
        return $this->startApiCall('Block', $request, $callOptions)->wait();
    }

    /**
     * This method, upon receiving a request on the stream, will pass the same
     * content back on the stream. This method showcases bidirectional
     * streaming RPCs.
     *
     * @example samples/V1beta1/EchoClient/chat.php
     *
     * @param array $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return BidiStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function chat(array $callOptions = []): BidiStream
    {
        return $this->startApiCall('Chat', null, $callOptions);
    }

    /**
     * This method will collect the words given to it. When the stream is closed
     * by the client, this method will return the a concatenation of the strings
     * passed to it. This method showcases client-side streaming RPCs.
     *
     * @example samples/V1beta1/EchoClient/collect.php
     *
     * @param array $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return ClientStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function collect(array $callOptions = []): ClientStream
    {
        return $this->startApiCall('Collect', null, $callOptions);
    }

    /**
     * This method simply echoes the request. This method showcases unary RPCs.
     *
     * The async variant is {@see EchoClient::echoAsync()} .
     *
     * @example samples/V1beta1/EchoClient/echo.php
     *
     * @param EchoRequest $request     A request to house fields associated with the call.
     * @param array       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return EchoResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function echo(EchoRequest $request, array $callOptions = []): EchoResponse
    {
        return $this->startApiCall('Echo', $request, $callOptions)->wait();
    }

    /**
     * This method returns error details in a repeated "google.protobuf.Any"
     * field. This method showcases handling errors thus encoded, particularly
     * over REST transport. Note that GAPICs only allow the type
     * "google.protobuf.Any" for field paths ending in "error.details", and, at
     * run-time, the actual types for these fields must be one of the types in
     * google/rpc/error_details.proto.
     *
     * The async variant is {@see EchoClient::echoErrorDetailsAsync()} .
     *
     * @example samples/V1beta1/EchoClient/echo_error_details.php
     *
     * @param EchoErrorDetailsRequest $request     A request to house fields associated with the call.
     * @param array                   $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return EchoErrorDetailsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function echoErrorDetails(EchoErrorDetailsRequest $request, array $callOptions = []): EchoErrorDetailsResponse
    {
        return $this->startApiCall('EchoErrorDetails', $request, $callOptions)->wait();
    }

    /**
     * This method splits the given content into words and will pass each word back
     * through the stream. This method showcases server-side streaming RPCs.
     *
     * @example samples/V1beta1/EchoClient/expand.php
     *
     * @param ExpandRequest $request     A request to house fields associated with the call.
     * @param array         $callOptions {
     *     Optional.
     *
     *     @type int $timeoutMillis
     *           Timeout to use for this call.
     * }
     *
     * @return ServerStream
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function expand(ExpandRequest $request, array $callOptions = []): ServerStream
    {
        return $this->startApiCall('Expand', $request, $callOptions);
    }

    /**
     * This method always fails with a gRPC "Aborted" error status that contains
     * multiple error details.  These include one instance of each of the standard
     * ones in error_details.proto
     * (https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto)
     * plus a custom, Showcase-defined PoetryError. The intent of this RPC is to
     * verify that GAPICs can process these various error details and surface them
     * to the user in an idiomatic form.
     *
     * The async variant is {@see EchoClient::failEchoWithDetailsAsync()} .
     *
     * @example samples/V1beta1/EchoClient/fail_echo_with_details.php
     *
     * @param FailEchoWithDetailsRequest $request     A request to house fields associated with the call.
     * @param array                      $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return FailEchoWithDetailsResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function failEchoWithDetails(FailEchoWithDetailsRequest $request, array $callOptions = []): FailEchoWithDetailsResponse
    {
        return $this->startApiCall('FailEchoWithDetails', $request, $callOptions)->wait();
    }

    /**
     * This is similar to the Expand method but instead of returning a stream of
     * expanded words, this method returns a paged list of expanded words.
     *
     * The async variant is {@see EchoClient::pagedExpandAsync()} .
     *
     * @example samples/V1beta1/EchoClient/paged_expand.php
     *
     * @param PagedExpandRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function pagedExpand(PagedExpandRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('PagedExpand', $request, $callOptions);
    }

    /**
     * This is similar to the PagedExpand except that it uses
     * max_results instead of page_size, as some legacy APIs still
     * do. New APIs should NOT use this pattern.
     *
     * The async variant is {@see EchoClient::pagedExpandLegacyAsync()} .
     *
     * @example samples/V1beta1/EchoClient/paged_expand_legacy.php
     *
     * @param PagedExpandLegacyRequest $request     A request to house fields associated with the call.
     * @param array                    $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedExpandResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function pagedExpandLegacy(PagedExpandLegacyRequest $request, array $callOptions = []): PagedExpandResponse
    {
        return $this->startApiCall('PagedExpandLegacy', $request, $callOptions)->wait();
    }

    /**
     * This method returns a map containing lists of words that appear in the input, keyed by their
     * initial character. The only words returned are the ones included in the current page,
     * as determined by page_token and page_size, which both refer to the word indices in the
     * input. This paging result consisting of a map of lists is a pattern used by some legacy
     * APIs. New APIs should NOT use this pattern.
     *
     * The async variant is {@see EchoClient::pagedExpandLegacyMappedAsync()} .
     *
     * @example samples/V1beta1/EchoClient/paged_expand_legacy_mapped.php
     *
     * @param PagedExpandRequest $request     A request to house fields associated with the call.
     * @param array              $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return PagedListResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function pagedExpandLegacyMapped(PagedExpandRequest $request, array $callOptions = []): PagedListResponse
    {
        return $this->startApiCall('PagedExpandLegacyMapped', $request, $callOptions);
    }

    /**
     * This method will wait for the requested amount of time and then return.
     * This method showcases how a client handles a request timeout.
     *
     * The async variant is {@see EchoClient::waitAsync()} .
     *
     * @example samples/V1beta1/EchoClient/wait.php
     *
     * @param WaitRequest $request     A request to house fields associated with the call.
     * @param array       $callOptions {
     *     Optional.
     *
     *     @type RetrySettings|array $retrySettings
     *           Retry settings to use for this call. Can be a {@see RetrySettings} object, or an
     *           associative array of retry settings parameters. See the documentation on
     *           {@see RetrySettings} for example usage.
     * }
     *
     * @return OperationResponse
     *
     * @throws ApiException Thrown if the API call fails.
     *
     * @experimental
     */
    public function wait(WaitRequest $request, array $callOptions = []): OperationResponse
    {
        return $this->startApiCall('Wait', $request, $callOptions)->wait();
    }
}
