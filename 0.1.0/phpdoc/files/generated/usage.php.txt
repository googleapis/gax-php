<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: google/api/usage.proto
//   Date: 2016-05-23 22:01:42

namespace google\api\Usage {

  class ServiceAccess extends \DrSlump\Protobuf\Enum {
    const RESTRICTED = 0;
    const PUBLIC = 1;
    const ORG_RESTRICTED = 2;
    const ORG_PUBLIC = 3;
  }
}
namespace google\api {

  class Usage extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\api\Usage\ServiceAccess */
    public $service_access = null;
    
    /**  @var string[]  */
    public $requirements = array();
    
    /**  @var string[]  */
    public $depends_on_services = array();
    
    /**  @var string[]  */
    public $activation_hooks = array();
    
    /**  @var string[]  */
    public $deactivation_hooks = array();
    
    /**  @var \google\api\UsageRule[]  */
    public $rules = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.Usage');

      // OPTIONAL ENUM service_access = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "service_access";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\Usage\ServiceAccess';
      $descriptor->addField($f);

      // REPEATED STRING requirements = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "requirements";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING depends_on_services = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "depends_on_services";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING activation_hooks = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "activation_hooks";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING deactivation_hooks = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "deactivation_hooks";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE rules = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\UsageRule';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <service_access> has a value
     *
     * @return boolean
     */
    public function hasServiceAccess(){
      return $this->_has(4);
    }
    
    /**
     * Clear <service_access> value
     *
     * @return \google\api\Usage
     */
    public function clearServiceAccess(){
      return $this->_clear(4);
    }
    
    /**
     * Get <service_access> value
     *
     * @return int - \google\api\Usage\ServiceAccess
     */
    public function getServiceAccess(){
      return $this->_get(4);
    }
    
    /**
     * Set <service_access> value
     *
     * @param int - \google\api\Usage\ServiceAccess $value
     * @return \google\api\Usage
     */
    public function setServiceAccess( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <requirements> has a value
     *
     * @return boolean
     */
    public function hasRequirements(){
      return $this->_has(1);
    }
    
    /**
     * Clear <requirements> value
     *
     * @return \google\api\Usage
     */
    public function clearRequirements(){
      return $this->_clear(1);
    }
    
    /**
     * Get <requirements> value
     *
     * @param int $idx
     * @return string
     */
    public function getRequirements($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <requirements> value
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function setRequirements( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <requirements>
     *
     * @return string[]
     */
    public function getRequirementsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <requirements>
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function addRequirements( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <depends_on_services> has a value
     *
     * @return boolean
     */
    public function hasDependsOnServices(){
      return $this->_has(2);
    }
    
    /**
     * Clear <depends_on_services> value
     *
     * @return \google\api\Usage
     */
    public function clearDependsOnServices(){
      return $this->_clear(2);
    }
    
    /**
     * Get <depends_on_services> value
     *
     * @param int $idx
     * @return string
     */
    public function getDependsOnServices($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <depends_on_services> value
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function setDependsOnServices( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <depends_on_services>
     *
     * @return string[]
     */
    public function getDependsOnServicesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <depends_on_services>
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function addDependsOnServices( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <activation_hooks> has a value
     *
     * @return boolean
     */
    public function hasActivationHooks(){
      return $this->_has(3);
    }
    
    /**
     * Clear <activation_hooks> value
     *
     * @return \google\api\Usage
     */
    public function clearActivationHooks(){
      return $this->_clear(3);
    }
    
    /**
     * Get <activation_hooks> value
     *
     * @param int $idx
     * @return string
     */
    public function getActivationHooks($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <activation_hooks> value
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function setActivationHooks( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <activation_hooks>
     *
     * @return string[]
     */
    public function getActivationHooksList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <activation_hooks>
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function addActivationHooks( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <deactivation_hooks> has a value
     *
     * @return boolean
     */
    public function hasDeactivationHooks(){
      return $this->_has(5);
    }
    
    /**
     * Clear <deactivation_hooks> value
     *
     * @return \google\api\Usage
     */
    public function clearDeactivationHooks(){
      return $this->_clear(5);
    }
    
    /**
     * Get <deactivation_hooks> value
     *
     * @param int $idx
     * @return string
     */
    public function getDeactivationHooks($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <deactivation_hooks> value
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function setDeactivationHooks( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <deactivation_hooks>
     *
     * @return string[]
     */
    public function getDeactivationHooksList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <deactivation_hooks>
     *
     * @param string $value
     * @return \google\api\Usage
     */
    public function addDeactivationHooks( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <rules> has a value
     *
     * @return boolean
     */
    public function hasRules(){
      return $this->_has(6);
    }
    
    /**
     * Clear <rules> value
     *
     * @return \google\api\Usage
     */
    public function clearRules(){
      return $this->_clear(6);
    }
    
    /**
     * Get <rules> value
     *
     * @param int $idx
     * @return \google\api\UsageRule
     */
    public function getRules($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <rules> value
     *
     * @param \google\api\UsageRule $value
     * @return \google\api\Usage
     */
    public function setRules(\google\api\UsageRule $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <rules>
     *
     * @return \google\api\UsageRule[]
     */
    public function getRulesList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <rules>
     *
     * @param \google\api\UsageRule $value
     * @return \google\api\Usage
     */
    public function addRules(\google\api\UsageRule $value){
     return $this->_add(6, $value);
    }
  }
}

namespace google\api {

  class UsageRule extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $selector = null;
    
    /**  @var boolean */
    public $allow_unregistered_calls = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.UsageRule');

      // OPTIONAL STRING selector = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "selector";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_unregistered_calls = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allow_unregistered_calls";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <selector> has a value
     *
     * @return boolean
     */
    public function hasSelector(){
      return $this->_has(1);
    }
    
    /**
     * Clear <selector> value
     *
     * @return \google\api\UsageRule
     */
    public function clearSelector(){
      return $this->_clear(1);
    }
    
    /**
     * Get <selector> value
     *
     * @return string
     */
    public function getSelector(){
      return $this->_get(1);
    }
    
    /**
     * Set <selector> value
     *
     * @param string $value
     * @return \google\api\UsageRule
     */
    public function setSelector( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <allow_unregistered_calls> has a value
     *
     * @return boolean
     */
    public function hasAllowUnregisteredCalls(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allow_unregistered_calls> value
     *
     * @return \google\api\UsageRule
     */
    public function clearAllowUnregisteredCalls(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allow_unregistered_calls> value
     *
     * @return boolean
     */
    public function getAllowUnregisteredCalls(){
      return $this->_get(2);
    }
    
    /**
     * Set <allow_unregistered_calls> value
     *
     * @param boolean $value
     * @return \google\api\UsageRule
     */
    public function setAllowUnregisteredCalls( $value){
      return $this->_set(2, $value);
    }
  }
}


